---
title: "DAG Analysis - Bad Controls: M-Bias Causal Structure"
author: "Dan Swart"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: article
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    code-overflow: wrap
    code-block-bg: "#FAEBD7"
    code-block-border-left: "#31BAE9"
    code-link: true          # This adds individual buttons
    fig-width: 12
    fig-height: 10
    fig-align: center
    html-math-method: katex
    css: swart-20250327.css
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    papersize: letter
    geometry:
      - margin=1in
    fig-width: 12
    fig-height: 10
    fig-pos: 'H'
  typst:
    toc: true
    fig-width: 12
    fig-height: 10
    keep-tex: true
    prefer-html: true
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, FALSE, message = TRUE, warning = TRUE)

library(tidyverse)  # For dplyr, ggplot, and friends
library(ggdag)      # For plotting DAGs
library(dagitty)    # For working with DAG logic
library(DiagrammeR) # For complete control of the layout
library(knitr)      # For controlling rendering
library(kableExtra) # For tables summarizing results
library(DT)         # For rendering content that kableExtra cannot (symbols)

```
<br>


## DAG RENDERING USING DiagrammeR.

There is no analysis with DiagrammeR, but analysis follows below.

```{r DiagrammeR-dag}
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 10


library(DiagrammeR)

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls:  M-Bias\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=36
    
    # Node settings
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"]
    
    # Edge settings
    edge [penwidth=3.0, color=\"darkblue\", arrowsize=2.0]
    
    # Nodes with exact coordinates - spread out more
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    U [label=\"U\", pos=\"1.0, 4.0!\", fontcolor=\"red\"]
    V [label=\"V\", pos=\"4.0, 4.0!\", fontcolor=\"red\"]
    Z [label=\"Z\", pos=\"2.5, 2.5!\", fontcolor=\"black\"]
    
    # Edges
    X -> Y
    U -> X
    U -> Z
    V -> Y
    V -> Z
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash Course\\nin Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")

```

<br>


### DAG Visualization using ggdag and dagitty

```{r complex-structure-dag1}
#| fig-cap: "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls"
#| fig-width: 12
#| fig-height: 10


# Define the DAG
m_bias_dag1 <- ggdag::dagify(
  Y ~ X,   # X influences Y
  X ~ U,   # U influences X
  Z ~ U,   # U influences Z
  Y ~ V,   # V influences Y
  Z ~ V,   # V influences Z
  exposure = "X",
  outcome = "Y",
  # Add labels here:
  labels = c(X = "X", 
             Y = "Y", 
             U = "U", 
             V = "V",
             Z = "Z"),
  coords = list(x = c(X = 1, Y = 4, U = 1, V = 4, Z = 2.5),  
                y = c(X = 1, Y = 1, U = 4, V = 4, Z = 2.5))
)

# Create a nice visualization of the DAG
ggdag_status(m_bias_dag1) + 
  ggdag::theme_dag(base_size = 18) +
  ggplot2::labs(title = "Bad Controls:  M-Bias")

```

## Executive Summary: M-Bias as a Bad Control

::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>What is M-Bias?</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}

### What is M-Bias? <span style="color: darkblue; font-size: 18px;"> (click to open and close)</span>

M-Bias occurs when we mistakenly control for a variable (Z) that is a **collider** between two unmeasured variables (U and V), where:
- U affects both our exposure (X) and the collider (Z)
- V affects both our outcome (Y) and the collider (Z)
- X directly affects Y (our relationship of interest)

The name "M-Bias" comes from the shape the DAG forms, resembling the letter M.

### Why is it a "Bad Control"?

Controlling for Z is harmful because:

1. **It creates bias where none existed**: Without controlling for Z, the causal effect of X on Y is correctly identified. Once we control for Z, we induce a spurious association between X and Y.

2. **It opens a backdoor path**: Conditioning on the collider Z opens an artificial pathway between X and Y: X ← U → Z ← V → Y, creating a non-causal association.

3. **It's counterintuitive**: Many researchers automatically control for all measured variables, assuming "more controls = better." M-Bias demonstrates why this approach can backfire.

### Real-World Example

A medical researcher is studying the effect of a medication (X) on recovery time (Y). Unknown to the researcher:

- Genetic factors (U) influence both who receives the medication and who experiences certain side effects (Z)
- Lifestyle factors (V) influence both recovery time and who experiences the side effects (Z)

If the researcher controls for side effects (Z) in the analysis, they will create a spurious association between the medication and recovery time, potentially leading to incorrect conclusions about the medication's effectiveness.

### How to Avoid M-Bias

1. **Carefully consider each control variable**: Don't automatically control for everything you measure
2. **Draw a DAG before analysis**: Visualize potential relationships between variables
3. **Look for collider structures**: Be cautious about controlling for variables affected by multiple others
4. **Apply causal inference principles**: Use tools like d-separation to determine proper adjustment sets

M-Bias demonstrates why causal thinking is essential—statistical association alone can lead us astray when selecting control variables.

:::





```{r}
#| message: false
#| warning: false
#| code-fold: false
#| echo: false

# Create a function to display DAG analysis results as a table
display_dag_analysis <- function(dag) {
  # Initialize results list
  results <- list()
  
  # 1. Get the implied conditional independencies
  results$independencies <- tryCatch({
    dagitty::impliedConditionalIndependencies(dag)
  }, error = function(e) {
    "None found"
  })
  
  # 2. Find all valid adjustment sets
  results$adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag)
  }, error = function(e) {
    list()
  })
  
  # 3. Find minimal sufficient adjustment sets
  results$minimal_adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag, type = "minimal")
  }, error = function(e) {
    list()
  })
  
  # 4. Identify paths between exposure and outcome
  results$paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y")
  }, error = function(e) {
    data.frame(paths = character(0), length = numeric(0))
  })
  
  # 5. Find instrumental variables
  results$instruments <- tryCatch({
    dagitty::instrumentalVariables(dag, exposure = "X", outcome = "Y")
  }, error = function(e) {
    NULL
  })
  
  # 6. Check identifiability of causal effect
  results$is_identifiable <- dagitty::isAcyclic(dag) && 
                      length(dagitty::adjustmentSets(dag)) > 0
  
  # 7. Find ancestors and descendants
  results$X_ancestors <- dagitty::ancestors(dag, "X")
  results$X_descendants <- dagitty::descendants(dag, "X")
  results$Y_ancestors <- dagitty::ancestors(dag, "Y")
  results$Y_descendants <- dagitty::descendants(dag, "Y")
  results$Z_ancestors <- dagitty::ancestors(dag, "Z")
  results$Z_descendants <- dagitty::descendants(dag, "Z")
  results$U_ancestors <- dagitty::ancestors(dag, "U")
  results$U_descendants <- dagitty::descendants(dag, "U")
  results$V_ancestors <- dagitty::ancestors(dag, "V") 
  results$V_descendants <- dagitty::descendants(dag, "V")
  
  # 8. Check backdoor paths
  results$backdoor_paths <- character(0)
  if(is.data.frame(results$paths) && nrow(results$paths) > 0) {
    for(i in 1:nrow(results$paths)) {
      path_str <- results$paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # A backdoor path has an arrow pointing into the exposure
      if(length(path_elements) >= 3) {
        second_element <- path_elements[2]
        if(second_element == "<-") {
          results$backdoor_paths <- c(results$backdoor_paths, path_str)
        }
      }
    }
  }
  
  # 9. Find directed paths (potential mediation)
  results$directed_paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y", directed = TRUE)
  }, error = function(e) {
    data.frame(paths = character(0), length = numeric(0))
  })
  
  results$mediators <- character(0)
  if(is.data.frame(results$directed_paths) && nrow(results$directed_paths) > 0) {
    for(i in 1:nrow(results$directed_paths)) {
      path_str <- results$directed_paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # Extract variables (every other element)
      path_vars <- path_elements[seq(1, length(path_elements), by = 2)]
      
      # Variables between X and Y are mediators
      if(length(path_vars) > 2) {
        potential_mediators <- path_vars[-c(1, length(path_vars))]
        results$mediators <- c(results$mediators, potential_mediators)
      }
    }
    results$mediators <- unique(results$mediators)
  }
  
  # 10. Test d-separation
  results$d_sep_results <- list(
    XY_given_nothing = dagitty::dseparated(dag, "X", "Y", c()),
    XY_given_Z = dagitty::dseparated(dag, "X", "Y", c("Z")),
    XY_given_U = dagitty::dseparated(dag, "X", "Y", c("U")),
    XY_given_V = dagitty::dseparated(dag, "X", "Y", c("V")),
    XY_given_UV = dagitty::dseparated(dag, "X", "Y", c("U", "V")),
    XY_given_UZ = dagitty::dseparated(dag, "X", "Y", c("U", "Z")),
    XY_given_VZ = dagitty::dseparated(dag, "X", "Y", c("V", "Z")),
    XY_given_UVZ = dagitty::dseparated(dag, "X", "Y", c("U", "V", "Z"))
  )
  
  # 11. Check paths under different adjustments
  results$adjustment_effects <- list()
  adjustment_sets_to_check <- list(
    "None" = c(),
    "Z" = c("Z"),
    "U" = c("U"),
    "V" = c("V"),
    "U, V" = c("U", "V"),
    "U, Z" = c("U", "Z"),
    "V, Z" = c("V", "Z"),
    "U, V, Z" = c("U", "V", "Z")
  )
  
  for(adj_name in names(adjustment_sets_to_check)) {
    adj_set <- adjustment_sets_to_check[[adj_name]]
    paths <- tryCatch({
      dagitty::paths(dag, from = "X", to = "Y")
    }, error = function(e) {
      data.frame(paths = character(0), length = numeric(0))
    })
    
    if(is.data.frame(paths) && nrow(paths) > 0) {
      open_paths <- tryCatch({
        dagitty::paths(dag, from = "X", to = "Y", Z = adj_set)
      }, error = function(e) {
        data.frame(paths = character(0), length = numeric(0))
      })
      
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = nrow(paths),
        "open_paths" = if(is.data.frame(open_paths)) nrow(open_paths) else 0
      )
    } else {
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = 0,
        "open_paths" = 0
      )
    }
  }
  
  # 12. Check impact of unmeasured confounding
  results$unmeasured_impact <- list()
  all_vars <- names(dagitty::coordinates(dag)$x)
  
  for(var in all_vars) {
    if(var != "X" && var != "Y") {
      # Create a DAG where this variable is latent
      dag_modified <- dag
      latent_vars <- dagitty::latents(dag_modified)
      dagitty::latents(dag_modified) <- c(latent_vars, var)
      
      # Check adjustment sets
      adj_sets_original <- dagitty::adjustmentSets(dag)
      adj_sets_modified <- tryCatch({
        dagitty::adjustmentSets(dag_modified)  
      }, error = function(e) {
        list()
      })
      
      results$unmeasured_impact[[var]] <- list(
        "original_sets" = length(adj_sets_original),
        "modified_sets" = length(adj_sets_modified)
      )
    }
  }
  
  return(results)
}

```


```{r run-the-analysis}
#| include: true
#| echo: false
#| results: 'hide'
#| code-fold: false


# Run the analysis
dag_results <- display_dag_analysis(m_bias_dag1)

# Create tables for presentation, but don't print them

# Table 1: Key DAG Properties
properties_df <- data.frame(
  Property = c(
    "Acyclic DAG", 
    "Causal effect identifiable",
    "Number of paths from X to Y",
    "Number of backdoor paths",
    "Direct effect of X on Y exists",
    "Potential mediators",
    "Number of adjustment sets",
    "Minimal adjustment sets"
  ),
  Value = c(
    ifelse(dagitty::isAcyclic(m_bias_dag1), "Yes", "No"),
    ifelse(dag_results$is_identifiable, "Yes", "No"),
    if(is.data.frame(dag_results$paths)) nrow(dag_results$paths) else 0,
    length(dag_results$backdoor_paths),
    ifelse("X" %in% dagitty::parents(m_bias_dag1, "Y"), "Yes", "No"),
    ifelse(length(dag_results$mediators) > 0, paste(dag_results$mediators, collapse=", "), "None"),
    length(dag_results$adjustment_sets),
    ifelse(length(dag_results$minimal_adjustment_sets) > 0, 
           paste(sapply(dag_results$minimal_adjustment_sets, function(x) paste(x, collapse=", ")), collapse="; "), 
           "None")
  )
)

```

```{r}
#| label: independencies-df
#| tbl-cap: "Implied Conditional Independencies"
#| results: 'asis'
#| code-fold: false
#| echo: false

# this chunk only creates a data frame but doesn't display it

# Table 2: Conditional Independencies

if(length(dag_results$independencies) > 0) {
  independencies_df <- data.frame(
    Index = 1:length(dag_results$independencies),
    Independencies = sapply(dag_results$independencies, function(x) paste(x, collapse=" "))
  )
} else {
  independencies_df <- data.frame(
    Index = 1,
    Independencies = "No conditional independencies found"
  )
}

```


```{r}
#| label: create-paths-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 3: Paths Analysis
if(is.data.frame(dag_results$paths) && nrow(dag_results$paths) > 0) {
  paths_df <- data.frame(
    Path = dag_results$paths$paths,
    Length = dag_results$paths$length,
    IsBackdoor = sapply(dag_results$paths$paths, function(p) {
      elements <- strsplit(p, " ")[[1]]
      if(length(elements) >= 3) {
        return(elements[2] == "<-")
      }
      return(FALSE)
    }),
    IsDirected = sapply(dag_results$paths$paths, function(p) {
      elements <- strsplit(p, " ")[[1]]
      all_forward <- TRUE
      for(i in seq(2, length(elements), by=2)) {
        if(elements[i] != "->") {
          all_forward <- FALSE
          break
        }
      }
      return(all_forward)
    })
  )
} else {
  paths_df <- data.frame(
    Path = "No paths found",
    Length = NA,
    IsBackdoor = NA,
    IsDirected = NA
  )
}
```


```{r}
#| label: create-ancestors-descendants-df
#| echo: false
#| include: true
#| results: 'hide'

# Table 4: Ancestors and Descendants

# this chunk only creates a data frame but doesn't display it

ancestors_descendants_df <- data.frame(
  Variable = c("X", "Y", "Z", "U", "V"),
  Ancestors = c(
    paste(dag_results$X_ancestors, collapse=", "),
    paste(dag_results$Y_ancestors, collapse=", "),
    paste(dag_results$Z_ancestors, collapse=", "),
    paste(dag_results$U_ancestors, collapse=", "),
    paste(dag_results$V_ancestors, collapse=", ")
  ),
  Descendants = c(
    paste(dag_results$X_descendants, collapse=", "),
    paste(dag_results$Y_descendants, collapse=", "),
    paste(dag_results$Z_descendants, collapse=", "),
    paste(dag_results$U_descendants, collapse=", "),
    paste(dag_results$V_descendants, collapse=", ")
  )
)

```

```{r}
#| label: create-d-sep-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 5: D-separation Results
d_sep_df <- data.frame(
  Variables = c("X and Y", "X and Y", "X and Y", "X and Y", "X and Y", "X and Y", "X and Y", "X and Y"),
  Conditioning_On = c("{ }", "Z", "U", "V", "U, V", "U, Z", "V, Z", "U, V, Z"),
  Is_D_Separated = c(
    ifelse(dag_results$d_sep_results$XY_given_nothing, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_Z, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_U, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_V, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_UV, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_UZ, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_VZ, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_UVZ, "Yes", "No")
  )
)

```

```{r}
#| label: create-adjustment-effect-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 6: Impact of Adjustments
adjustment_effect_df <- data.frame(
  Adjustment_Set = names(dag_results$adjustment_effects),
  Total_Paths = sapply(dag_results$adjustment_effects, function(x) x$total_paths),
  Open_Paths = sapply(dag_results$adjustment_effects, function(x) x$open_paths)
)

```

```{r}
#| label: create-unmeasured-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 7: Unmeasured Confounding
if(length(dag_results$unmeasured_impact) > 0) {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = names(dag_results$unmeasured_impact),
    Original_Adjustment_Sets = sapply(dag_results$unmeasured_impact, function(x) x$original_sets),
    Adjusted_Sets_When_Unmeasured = sapply(dag_results$unmeasured_impact, function(x) x$modified_sets)
  )
} else {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = "None",
    Original_Adjustment_Sets = NA,
    Adjusted_Sets_When_Unmeasured = NA
  )
}

```

```{r}
#| label: create-instruments-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Instrumental variables table
if(!is.null(dag_results$instruments) && length(dag_results$instruments) > 0) {
  # Convert the instruments to a character vector before creating data frame
  if(class(dag_results$instruments) == "dagitty.ivs") {
    instruments_list <- as.character(dag_results$instruments)
    instruments_df <- data.frame(
      Instruments = instruments_list
    )
  } else {
    instruments_df <- data.frame(
      Instruments = as.character("No valid instrumental variables found")
    )
  }
} else {
  instruments_df <- data.frame(
    Instruments = as.character("No valid instrumental variables found")
  )
}

```

```{r}
#| label: create-dag-plot
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a plot object but doesn't display it

# Create a nice visualization of the DAG using ggdag
dag_plot <- ggdag(m_bias_dag1) + 
  theme_dag() +
  label("DAG: M-Bias causal structure")

```
<br>

## 2. Results

### 2.1 Table of Key DAG Properties

```{r}
#| label: tbl-key-properties
#| tbl-cap: "Key Properties of the DAG"
#| code-fold: true

DT::datatable(
  properties_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.2 Table of Conditional Independencies

```{r}
#| label: independencies-analysis
#| tbl-cap: "Implied Conditional Independencies"

DT::datatable(
  independencies_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.3 Table of Paths Between X and Y

```{r}
#| label: tbl-paths
#| tbl-cap: "All Paths Between X and Y"

DT::datatable(
  paths_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.4 Table of Ancestors and Descendants

```{r}
#| label: tbl-ancestors-descendants
#| tbl-cap: "Ancestors and Descendants"

DT::datatable(
  ancestors_descendants_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.5 Table of D-Separation Results

```{r}
#| label: tbl-d-separation
#| tbl-cap: "D-Separation Test Results"

DT::datatable(
  d_sep_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.6 Table of Impact of Adjustments

```{r}
#| label: tbl-adjustments
#| tbl-cap: "Effect of Different Adjustment Sets"

DT::datatable(
  adjustment_effect_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.7 Table of Unmeasured Confounding Impact

```{r}
#| label: tbl-unmeasured
#| tbl-cap: "Impact of Treating Variables as Unmeasured"

DT::datatable(
  unmeasured_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.8 Table of Instrumental Variables

```{r}
#| label: tbl-instruments
#| tbl-cap: "Potential Instrumental Variables"

DT::datatable(
  instruments_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>


### 3. Visualizing Status, Adjustment Sets and Paths with ggdag

```{r}
#| fig-cap: "Different visualizations of the DAG"
#| fig-subcap: 
#|   - "Status Plot: Exposure and Outcome"
#|   - "Adjustment Sets for X → Y"
#|   - "All Paths between X and Y"
#| layout-ncol: 1
#| fig-width: 12
#| fig-height: 8

# Create dagitty object with ggdag positioning
dag <- dagitty("dag {
  X -> Y
  U -> X
  U -> Z
  V -> Y
  V -> Z
  
  X [exposure]
  Y [outcome]
}")

# Set coordinates for visualization in digatty format
coordinates(dag) <- list(
  x = c(X = 1, Y = 4, U = 1, V = 4, Z = 2.5),
  y = c(X = 1, Y = 1, U = 4, V = 4, Z = 2.5)
)

# Convert to ggdag format
dag_tidy <- tidy_dagitty(dag)

# Status plot showing exposure/outcome
ggdag_status(dag_tidy) +
  theme_dag(base_size = 16) +
  label("Status Plot: Exposure and Outcome")

# Adjustment set visualization
ggdag_adjustment_set(dag_tidy) +
  theme_dag(base_size = 16) +
  label("Adjustment Sets for X → Y")

# Paths visualization
ggdag_paths(dag_tidy) +
  theme_dag(base_size = 16) +
  label("All Paths between X and Y")

```
<br>

## 4. Interpretation and Discussion

### 4.1 Key Insights about this M-Bias DAG Structure

This DAG represents a causal network known as an M-Bias structure, examining the relationship between X and Y:

1. **Direct Causal Effect (X → Y)**
   - X has a direct causal effect on Y
   - This represents the primary relationship of interest

2. **M-Bias Structure**
   - U affects X and Z, creating one arm of the "M"
   - V affects Y and Z, creating the other arm of the "M"
   - Z is a collider (both U and V point to Z)
   - Z is not on any causal path between X and Y

3. **Potential Pitfalls**
   - Conditioning on Z (the collider) can create a spurious association between X and Y
   - This is because conditioning on Z opens a non-causal pathway: X ← U → Z ← V → Y
   - The seemingly innocent variable Z can create bias when included in adjustment

### 4.2 Proper Identification Strategy

To identify the causal effect of X on Y:
  - No adjustment is necessary for the M-bias structure if U and V are not measured
  - The causal effect of X on Y is already identified without any adjustment
  - Importantly, adjusting for Z will introduce bias rather than reduce it
  - If U is measured, adjusting for U would block the backdoor path through U
  - If V is measured, adjusting for V would block the backdoor path through V
  - The most efficient strategy is to avoid adjusting for Z entirely

<br>


### Glossary

::: {.callout-note collapse="true"}
# DAG Analysis Glossary - Click to Open and Close

### Key DAG Terms and Concepts

**DAG (Directed Acyclic Graph)**: A graphical representation of causal relationships where arrows indicate the direction of causality, and no variable can cause itself through any path (hence "acyclic").

**Exposure**: The variable whose causal effect we want to estimate (often called the treatment or independent variable).

**Outcome**: The variable we are interested in measuring the effect on (often called the dependent variable).

**Confounder**: A variable that influences both the exposure and the outcome, potentially creating a spurious association between them.

**Mediator**: A variable that lies on the causal pathway between the exposure and outcome (exposure → mediator → outcome).

**Collider**: A variable that is influenced by both the exposure and the outcome, or by two variables on a path (e.g., A → C ← B).

**Backdoor path**: Any non-causal path connecting the exposure to the outcome that creates a spurious association.

**M-Bias**: A specific DAG structure where conditioning on a collider can create a spurious association between exposure and outcome.

### Understanding the Analysis Tables

#### 2. Conditional Independencies Table

Shows the implied conditional independencies in the DAG - pairs of variables that should be statistically independent when conditioning on specific other variables. These can be used to test the validity of your DAG against observed data.

#### 3. Paths Analysis Table

Enumerates all paths connecting the exposure to the outcome:

- **Path**: The specific variables and connections in each path
- **Length**: Number of edges in the path
- **IsBackdoor**: Whether this is a backdoor path (potential source of confounding)
- **IsDirected**: Whether this is a directed path from exposure to outcome

Testing whether these paths are open or closed under different conditioning strategies is crucial for causal inference.

#### 4. Ancestors and Descendants Table

Shows which variables can causally affect (ancestors) or be affected by (descendants) each variable in the DAG:

- Understanding ancestry relationships helps identify potential confounders
- Descendants should not be controlled for as this may introduce bias

#### 5. D-Separation Results Table

Shows whether exposure and outcome are conditionally independent (d-separated) when conditioning on different variable sets:

- **Is_D_Separated = Yes**: This set of conditioning variables blocks all non-causal paths
- **Is_D_Separated = No**: Some non-causal association remains

This helps identify sufficient adjustment sets for estimating causal effects.

#### 6. Impact of Adjustments Table

Shows how different adjustment strategies affect the identification of causal effects:

- **Total_Paths**: Total number of paths between exposure and outcome
- **Open_Paths**: Number of paths that remain open after adjustment
  
Ideally, adjusting for the right variables leaves only the causal paths open.

#### 7. Unmeasured Confounding Impact Table

Simulates the effect of being unable to measure certain variables:

- **Original_Adjustment_Sets**: Number of valid adjustment sets with all variables measured
- **Adjusted_Sets_When_Unmeasured**: Number of valid adjustment sets when this variable is unmeasured

This helps identify which variables are most critical to measure for valid causal inference.

#### 8. Instrumental Variables Table

Lists potential instrumental variables - variables that affect the exposure but have no direct effect on the outcome except through the exposure. These are useful for causal inference when confounding is present, especially in methods like instrumental variable estimation.

### How to Use This Analysis for Causal Inference

1. **Identify minimal sufficient adjustment sets**: These are the variables you should control for in your analysis to remove confounding.

2. **Avoid conditioning on colliders**: This can introduce bias. Check the paths and d-separation results to ensure your adjustment strategy doesn't open non-causal paths.

3. **Validate your DAG**: Use the implied conditional independencies to test your causal assumptions against observed data.

4. **Assess sensitivity to unmeasured confounding**: The unmeasured confounding analysis helps understand how robust your conclusions might be.

5. **Consider mediation analysis**: If mediators are present, you might want to decompose total effects into direct and indirect components.

6. **Look for instrumental variables**: These can help establish causality even in the presence of unmeasured confounding.

7. **Recognize M-Bias structure**: In this particular DAG, adjusting for Z (the collider) would introduce bias rather than reduce it - a classic M-Bias problem.

Remember that the validity of any causal inference depends on the correctness of your DAG - it represents your causal assumptions about the data-generating process, which should be based on substantive domain knowledge.


 1. Key Properties Table

This table provides a high-level overview of the DAG structure and key causal features:

- **Acyclic DAG**: Confirms the graph has no cycles (a prerequisite for valid causal analysis)
- **Causal effect identifiable**: Indicates whether the causal effect can be estimated from observational data
- **Number of paths**: Total number of paths connecting exposure and outcome
- **Number of backdoor paths**: Paths creating potential confounding that need to be blocked
- **Direct effect exists**: Whether there is a direct causal link from exposure to outcome
- **Potential mediators**: Variables that may mediate the causal effect
- **Number of adjustment sets**: How many different sets of variables could be adjusted for
- **Minimal adjustment sets**: The smallest sets of variables that block all backdoor paths

:::
