---
title: "Bad Controls:  Bias Amplification"
author: "Dan Swart"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: article
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    code-overflow: wrap
    code-block-bg: "#FAEBD7"
    code-block-border-left: "#31BAE9"
    code-link: true          # This adds individual buttons
    fig-width: 12
    fig-height: 10
    fig-align: center
    html-math-method: katex
    css: swart-20250327.css
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    papersize: letter
    geometry:
      - margin=1in
    fig-width: 12
    fig-height: 10
    fig-pos: 'H'
  typst:
    toc: true
    fig-width: 12
    fig-height: 10
    keep-tex: true
    prefer-html: true
---




```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, FALSE, message = TRUE, warning = TRUE)

library(tidyverse)  # For dplyr, ggplot, and friends
library(ggdag)      # For plotting DAGs
library(dagitty)    # For working with DAG logic
library(DiagrammeR) # For complete control of the layout
library(knitr)      # For controlling rendering
library(kableExtra) # For tables summarizing results
library(DT)         # For rendering content that kableExtra cannot (symbols)

```
<br>


## DAG RENDERING USING DiagrammeR.

There is no analysis with DiagrammeR, but analysis follows below.

```{r bias-amplification-dag7}
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 10


library(DiagrammeR)

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls: Bias Amplification\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"1.0, 3.0!\", fontcolor=\"black\"]
    U [label=\"U\", pos=\"2.5, 2.0!\", fontcolor=\"darkpurple\"]
    
    
    # Edges
    X -> Y
    Z -> X
    U -> X
    U -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")

```

<br>


### DAG Visualization using ggdag and dagitty

```{r complex-structure-dag1}
#| fig-cap: "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls"
#| fig-width: 12
#| fig-height: 10


# Define the DAG
bias_amplification_dag7 <- ggdag::dagify(
  Y ~ X,   
  X ~ Z,   
  X ~ U,
  Y ~ U,
  exposure = "X",
  outcome = "Y",
  # Add labels here:
  labels = c(X = "X", 
             Y = "Y", 
             Z = "Z",
             U = "U"),
  coords = list(x = c(X = 1, Y = 3.0, Z = 1.0, U = 2.0),  
                y = c(X = 1, Y = 1.0, Z = 2.0, U = 1.5))
)

# Create a nice visualization of the DAG
ggdag_status(bias_amplification_dag7) + 
  theme_dag(base_size = 18) +
  labs(title = "Bad Controls: Bias Amplification")

```

## Executive Summary: Bias Amplification as a Bad Control

::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>What is Bias Amplification?</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}


Bias amplification occurs when we adjust for a variable Z that is a cause of the exposure X but not a confounder, while there exists an unmeasured confounder U affecting both X and Y. In this DAG structure, adjusting for Z can actually increase the bias in our estimate of the causal effect of X on Y.

#### Why is it a "Bad Control"?

Controlling for Z in this structure is harmful because:

1. **It increases bias**: By conditioning on Z, we're adjusting for a variable that is associated with the exposure X but not directly related to the outcome Y, which can amplify the bias due to the unmeasured confounder U.

2. **It induces selection bias**: Conditioning on Z changes the relationship between X and the unmeasured confounder U, potentially making the confounding worse.

3. **It can worsen measurement error issues**: If X is measured with error, conditioning on Z can increase the bias in the effect estimate.

#### Real-World Example

A researcher is studying the effect of a medication dosage (X) on patient recovery (Y):

- The medication dosage (X) affects recovery outcome (Y).
- The patient's weight (Z) affects the medication dosage (X) prescribed.
- There is an unmeasured variable U (perhaps genetic factors) that affects both dosage tolerance (X) and recovery outcome (Y).

If the researcher controls for patient weight (Z), they may actually increase the bias in their estimate of the medication's effect due to the amplification of the confounding from the unmeasured genetic factors (U).

#### How to Avoid Bias Amplification

1. **Identify true confounders**: Focus on controlling for variables that affect both the treatment and outcome.

2. **Be cautious with causes of exposure**: Be careful when adjusting for variables that only affect the exposure and have no other path to the outcome, especially when there might be unmeasured confounders.

3. **Use causal diagrams**: Visualize the causal structure to identify appropriate control variables and potential unmeasured confounders.

4. **Consider sensitivity analysis**: Assess how sensitive your estimates are to potential unmeasured confounding.

Bias amplification demonstrates that controlling for more variables is not always better and can sometimes make causal estimates worse when unmeasured confounding is present.

:::

```{r}
#| message: false
#| warning: false
#| code-fold: false
#| echo: false

# Create a function to display DAG analysis results as a table
display_dag_analysis <- function(dag) {
  # Initialize results list
  results <- list()
  
  # 1. Get the implied conditional independencies
  results$independencies <- tryCatch({
    dagitty::impliedConditionalIndependencies(dag)
  }, error = function(e) {
    "None found"
  })
  
  # 2. Find all valid adjustment sets
  results$adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag)
  }, error = function(e) {
    list()
  })
  
  # 3. Find minimal sufficient adjustment sets
  results$minimal_adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag, type = "minimal")
  }, error = function(e) {
    list()
  })
  
  # 4. Identify paths between exposure and outcome
  results$paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y")
  }, error = function(e) {
    data.frame(paths = character(0), length = numeric(0))
  })
  
  # 5. Find instrumental variables
  results$instruments <- tryCatch({
    dagitty::instrumentalVariables(dag, exposure = "X", outcome = "Y")
  }, error = function(e) {
    NULL
  })
  
  # 6. Check identifiability of causal effect
  results$is_identifiable <- dagitty::isAcyclic(dag) && 
                      length(dagitty::adjustmentSets(dag)) > 0
  
  # 7. Find ancestors and descendants
  results$X_ancestors <- dagitty::ancestors(dag, "X")
  results$X_descendants <- dagitty::descendants(dag, "X")
  results$Y_ancestors <- dagitty::ancestors(dag, "Y")
  results$Y_descendants <- dagitty::descendants(dag, "Y")
  results$Z_ancestors <- dagitty::ancestors(dag, "Z")
  results$Z_descendants <- dagitty::descendants(dag, "Z")
  results$U_ancestors <- dagitty::ancestors(dag, "U")
  results$U_descendants <- dagitty::descendants(dag, "U")
  
  # 8. Check backdoor paths
  results$backdoor_paths <- character(0)
  if(is.data.frame(results$paths) && nrow(results$paths) > 0) {
    for(i in 1:nrow(results$paths)) {
      path_str <- results$paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # A backdoor path has an arrow pointing into the exposure
      if(length(path_elements) >= 3) {
        second_element <- path_elements[2]
        if(second_element == "<-") {
          results$backdoor_paths <- c(results$backdoor_paths, path_str)
        }
      }
    }
  }
  
  # 9. Find directed paths (potential mediation)
  results$directed_paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y", directed = TRUE)
  }, error = function(e) {
    data.frame(paths = character(0), length = numeric(0))
  })
  
  results$mediators <- character(0)
  if(is.data.frame(results$directed_paths) && nrow(results$directed_paths) > 0) {
    for(i in 1:nrow(results$directed_paths)) {
      path_str <- results$directed_paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # Extract variables (every other element)
      path_vars <- path_elements[seq(1, length(path_elements), by = 2)]
      
      # Variables between X and Y are mediators
      if(length(path_vars) > 2) {
        potential_mediators <- path_vars[-c(1, length(path_vars))]
        results$mediators <- c(results$mediators, potential_mediators)
      }
    }
    results$mediators <- unique(results$mediators)
  }
  
  # 10. Test d-separation
  results$d_sep_results <- list(
    XY_given_nothing = dagitty::dseparated(dag, "X", "Y", c()),
    XY_given_Z = dagitty::dseparated(dag, "X", "Y", c("Z")),
    XY_given_U = dagitty::dseparated(dag, "X", "Y", c("U")),
    XY_given_ZU = dagitty::dseparated(dag, "X", "Y", c("Z", "U"))
  )
  
  # 11. Check paths under different adjustments
  results$adjustment_effects <- list()
  adjustment_sets_to_check <- list(
    "None" = c(),
    "Z" = c("Z"),
    "U" = c("U"),
    "Z and U" = c("Z", "U")
  )
  
  for(adj_name in names(adjustment_sets_to_check)) {
    adj_set <- adjustment_sets_to_check[[adj_name]]
    paths <- tryCatch({
      dagitty::paths(dag, from = "X", to = "Y")
    }, error = function(e) {
      data.frame(paths = character(0), length = numeric(0))
    })
    
    if(is.data.frame(paths) && nrow(paths) > 0) {
      open_paths <- tryCatch({
        dagitty::paths(dag, from = "X", to = "Y", Z = adj_set)
      }, error = function(e) {
        data.frame(paths = character(0), length = numeric(0))
      })
      
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = nrow(paths),
        "open_paths" = if(is.data.frame(open_paths)) nrow(open_paths) else 0
      )
    } else {
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = 0,
        "open_paths" = 0
      )
    }
  }
  
  return(results)
}

```

```{r run-the-analysis}
#| include: true
#| echo: false
#| results: 'hide'
#| code-fold: false


# Run the analysis
dag_results <- display_dag_analysis(bias_amplification_dag7)

# Create tables for presentation, but don't print them

# Table 1: Key DAG Properties
properties_df <- data.frame(
  Property = c(
    "Acyclic DAG", 
    "Causal effect identifiable",
    "Number of paths from X to Y",
    "Number of backdoor paths",
    "Direct effect of X on Y exists",
    "Potential mediators",
    "Number of adjustment sets",
    "Minimal adjustment sets"
  ),
  Value = c(
    ifelse(dagitty::isAcyclic(bias_amplification_dag7), "Yes", "No"),
    ifelse(dag_results$is_identifiable, "Yes", "No"),
    if(is.data.frame(dag_results$paths)) nrow(dag_results$paths) else 0,
    length(dag_results$backdoor_paths),
    ifelse("X" %in% dagitty::parents(bias_amplification_dag7, "Y"), "Yes", "No"),
    ifelse(length(dag_results$mediators) > 0, paste(dag_results$mediators, collapse=", "), "None"),
    length(dag_results$adjustment_sets),
    ifelse(length(dag_results$minimal_adjustment_sets) > 0, 
           paste(sapply(dag_results$minimal_adjustment_sets, function(x) paste(x, collapse=", ")), collapse="; "), 
           "None")
  )
)

```

```{r}
#| label: independencies-df
#| tbl-cap: "Implied Conditional Independencies"
#| results: 'asis'
#| code-fold: false
#| echo: false

# this chunk only creates a data frame but doesn't display it

# Table 2: Conditional Independencies

if(length(dag_results$independencies) > 0) {
  independencies_df <- data.frame(
    Index = 1:length(dag_results$independencies),
    Independencies = sapply(dag_results$independencies, function(x) paste(x, collapse=" "))
  )
} else {
  independencies_df <- data.frame(
    Index = 1,
    Independencies = "No conditional independencies found"
  )
}

```


```{r}
#| label: create-paths-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 3: Paths Analysis
if(is.data.frame(dag_results$paths) && nrow(dag_results$paths) > 0) {
  paths_df <- data.frame(
    Path = dag_results$paths$paths,
    Length = dag_results$paths$length,
    IsBackdoor = sapply(dag_results$paths$paths, function(p) {
      elements <- strsplit(p, " ")[[1]]
      if(length(elements) >= 3) {
        return(elements[2] == "<-")
      }
      return(FALSE)
    }),
    IsDirected = sapply(dag_results$paths$paths, function(p) {
      elements <- strsplit(p, " ")[[1]]
      all_forward <- TRUE
      for(i in seq(2, length(elements), by=2)) {
        if(elements[i] != "->") {
          all_forward <- FALSE
          break
        }
      }
      return(all_forward)
    })
  )
} else {
  paths_df <- data.frame(
    Path = "No paths found",
    Length = NA,
    IsBackdoor = NA,
    IsDirected = NA
  )
}
```


```{r}
#| label: create-ancestors-descendants-df
#| echo: false
#| include: true
#| results: 'hide'

# Table 4: Ancestors and Descendants

# this chunk only creates a data frame but doesn't display it

ancestors_descendants_df <- data.frame(
  Variable = c("X", "Y", "Z", "U"),
  Ancestors = c(
    paste(dag_results$X_ancestors, collapse=", "),
    paste(dag_results$Y_ancestors, collapse=", "),
    paste(dag_results$Z_ancestors, collapse=", "),
    paste(dag_results$U_ancestors, collapse=", ")
  ),
  Descendants = c(
    paste(dag_results$X_descendants, collapse=", "),
    paste(dag_results$Y_descendants, collapse=", "),
    paste(dag_results$Z_descendants, collapse=", "),
    paste(dag_results$U_descendants, collapse=", ")
  )
)

```

```{r}
#| label: create-d-sep-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 5: D-separation Results
d_sep_df <- data.frame(
  Variables = c("X and Y", "X and Y", "X and Y", "X and Y"),
  Conditioning_On = c("{ }", "Z", "U", "Z and U"),
  Is_D_Separated = c(
    ifelse(dag_results$d_sep_results$XY_given_nothing, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_Z, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_U, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_ZU, "Yes", "No")
  )
)

```

```{r}
#| label: create-adjustment-effect-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 6: Impact of Adjustments
adjustment_effect_df <- data.frame(
  Adjustment_Set = names(dag_results$adjustment_effects),
  Total_Paths = sapply(dag_results$adjustment_effects, function(x) x$total_paths),
  Open_Paths = sapply(dag_results$adjustment_effects, function(x) x$open_paths)
)

```

```{r}
#| label: create-instruments-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Instrumental variables table
if(!is.null(dag_results$instruments) && length(dag_results$instruments) > 0) {
  # Convert the instruments to a character vector before creating data frame
  if(class(dag_results$instruments) == "dagitty.ivs") {
    instruments_list <- as.character(dag_results$instruments)
    instruments_df <- data.frame(
      Instruments = instruments_list
    )
  } else {
    instruments_df <- data.frame(
      Instruments = as.character("No valid instrumental variables found")
    )
  }
} else {
  instruments_df <- data.frame(
    Instruments = as.character("No valid instrumental variables found")
  )
}

```

```{r}
#| label: create-dag-plot
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a plot object but doesn't display it

# Create a nice visualization of the DAG using ggdag
dag_plot <- ggdag(bias_amplification_dag7) + 
  theme_dag() +
  label("DAG: Bias Amplification")

```
<br>

## 2. Results

### 2.1 Table of Key DAG Properties

```{r}
#| label: tbl-key-properties
#| tbl-cap: "Key Properties of the DAG"
#| code-fold: true

DT::datatable(
  properties_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.2 Table of Conditional Independencies

```{r}
#| label: independencies-analysis
#| tbl-cap: "Implied Conditional Independencies"

DT::datatable(
  independencies_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.3 Table of Paths Between X and Y

```{r}
#| label: tbl-paths
#| tbl-cap: "All Paths Between X and Y"

DT::datatable(
  paths_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.4 Table of Ancestors and Descendants

```{r}
#| label: tbl-ancestors-descendants
#| tbl-cap: "Ancestors and Descendants"

DT::datatable(
  ancestors_descendants_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.5 Table of D-Separation Results

```{r}
#| label: tbl-d-separation
#| tbl-cap: "D-Separation Test Results"

DT::datatable(
  d_sep_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.6 Table of Impact of Adjustments

```{r}
#| label: tbl-adjustments
#| tbl-cap: "Effect of Different Adjustment Sets"

DT::datatable(
  adjustment_effect_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.7 Table of Instrumental Variables

```{r}
#| label: tbl-instruments
#| tbl-cap: "Potential Instrumental Variables"

DT::datatable(
  instruments_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>


### 3. Visualizing Status, Adjustment Sets and Paths with ggdag

```{r}
#| fig-cap: "Different visualizations of the DAG"
#| fig-subcap: 
#|   - "Status Plot: Exposure and Outcome"
#|   - "Adjustment Sets for X → Y"
#|   - "All Paths between X and Y"
#| layout-ncol: 1
#| fig-width: 12
#| fig-height: 8

# Create dagitty object with ggdag positioning
dag <- dagitty("dag {
  Y <- X
  X <- Z
  X <- U
  Y <- U
  
  X [exposure]
  Y [outcome]
}")

# Set coordinates for visualization in digatty format
dagitty::coordinates(dag) <- list(x = c(X = 1, Y = 3.0, Z = 1.0, U = 2.0),  
                         y = c(X = 1, Y = 1.0, Z = 1.75, U = 1.5)
)

# Convert to ggdag format
dag_tidy <- ggdag::tidy_dagitty(dag)

# Status plot showing exposure/outcome
ggdag_status(dag_tidy) +
  ggdag::theme_dag(base_size = 16) +
  ggplot2::labs(title = "Status Plot: Exposure and Outcome")

# Adjustment set visualization
ggdag::ggdag_adjustment_set(dag_tidy) +
  ggdag::theme_dag(base_size = 16) +
  ggplot2::labs(title = "Adjustment Sets for X → Y")

# Paths visualization
ggdag::ggdag_paths(dag_tidy) +
  ggdag::theme_dag(base_size = 16) +
  ggplot2::labs(title = "All Paths between X and Y")

```
<br>

## 4. Interpretation and Discussion

### 4.1 Key Insights about this Bias Amplification DAG Structure

This DAG represents a causal network with a bias amplification structure, examining the relationship between X and Y with Z as a precision parasite and U as an unmeasured confounder:

1. **Direct Causal Effect (X → Y)**
   - X directly affects Y
   - This represents the causal effect we're interested in measuring

2. **Precision Parasite Variable (Z)**
   - Z directly affects X
   - Z has no direct or indirect effect on Y
   - This creates a precision parasite relationship

3. **Unmeasured Confounder (U)**
   - U affects both X and Y
   - U creates a backdoor path between X and Y
   - This introduces confounding that needs to be controlled for

4. **Bias Amplification**
   - Adjusting for Z while failing to adjust for U can amplify the bias
   - This happens because conditioning on Z can strengthen the relationship between X and U
   - The resulting bias in the estimate of X on Y can be larger than if we had not adjusted for Z

### 4.2 Proper Identification Strategy

To identify the causal effect of X on Y:
  - Adjust for U to block the backdoor path X ← U → Y
  - Do not adjust for Z alone, as it can amplify the bias due to U
  - If U is unmeasured (as is often the case in real-world scenarios), consider:
    - Using sensitivity analysis to assess the potential impact of unmeasured confounding
    - Looking for proxy variables for U
    - Using instrumental variable approaches if valid instruments are available
    - Consider Z as a potential instrument for X, but only if U can be adequately controlled
  - The key insight is that adjusting for Z without adjusting for U is worse than not adjusting at all

<br>


### Glossary

::: {.callout-note collapse="true"}
# DAG Analysis Glossary - Click to Open and Close

### Key DAG Terms and Concepts

**DAG (Directed Acyclic Graph)**: A graphical representation of causal relationships where arrows indicate the direction of causality, and no variable can cause itself through any path (hence "acyclic").

**Exposure**: The variable whose causal effect we want to estimate (often called the treatment or independent variable).

**Outcome**: The variable we are interested in measuring the effect on (often called the dependent variable).

**Confounder**: A variable that influences both the exposure and the outcome, potentially creating a spurious association between them.

**Mediator**: A variable that lies on the causal pathway between the exposure and outcome (exposure → mediator → outcome).

**Collider**: A variable that is influenced by both the exposure and the outcome, or by two variables on a path (e.g., A → C ← B).

**Backdoor path**: Any non-causal path connecting the exposure to the outcome that creates a spurious association.

**Instrumental Variable**: A variable that affects the exposure but has no direct effect on the outcome except through the exposure.

**Bias Amplification**: A type of bias that occurs when we condition on a variable Z that affects the exposure X but is not a confounder, while there exists an unmeasured confounder U affecting both X and Y. This conditioning can actually increase the bias in our estimate of the causal effect.

### Understanding the Analysis Tables

#### 2. Conditional Independencies Table

Shows the implied conditional independencies in the DAG - pairs of variables that should be statistically independent when conditioning on specific other variables. These can be used to test the validity of your DAG against observed data.

#### 3. Paths Analysis Table

Enumerates all paths connecting the exposure to the outcome:

- **Path**: The specific variables and connections in each path
- **Length**: Number of edges in the path
- **IsBackdoor**: Whether this is a backdoor path (potential source of confounding)
- **IsDirected**: Whether this is a directed path from exposure to outcome

Testing whether these paths are open or closed under different conditioning strategies is crucial for causal inference.

#### 4. Ancestors and Descendants Table

Shows which variables can causally affect (ancestors) or be affected by (descendants) each variable in the DAG:

- Understanding ancestry relationships helps identify potential confounders
- Z is an ancestor of X but not Y, while U is an ancestor of both X and Y in this DAG

#### 5. D-Separation Results Table

Shows whether exposure and outcome are conditionally independent (d-separated) when conditioning on different variable sets:

- **Is_D_Separated = Yes**: This set of conditioning variables blocks all non-causal paths
- **Is_D_Separated = No**: Some non-causal association remains

This helps identify sufficient adjustment sets for estimating causal effects.

#### 6. Impact of Adjustments Table

Shows how different adjustment strategies affect the identification of causal effects:

- **Total_Paths**: Total number of paths between exposure and outcome
- **Open_Paths**: Number of paths that remain open after adjustment
  
Ideally, adjusting for the right variables leaves only the causal paths open.

#### 7. Instrumental Variables Table

Lists potential instrumental variables - variables that affect the exposure but have no direct effect on the outcome except through the exposure.

### How to Use This Analysis for Causal Inference

1. **Identify minimal sufficient adjustment sets**: These are the variables you should control for in your analysis to remove confounding.

2. **Avoid bias amplification**: Be cautious about adjusting for Z without also adjusting for U, as this can amplify the bias in your causal estimate.

3. **Validate your DAG**: Use the implied conditional independencies to test your causal assumptions against observed data.

4. **Consider unmeasured confounders**: Always be aware of potential unmeasured confounders and how they might affect your analysis. In this DAG, U represents such a confounder.

5. **Be cautious with instrumental variables**: In this structure, Z might be considered as an instrumental variable for estimating the effect of X on Y, but only if U can be adequately controlled for.

Remember that the validity of any causal inference depends on the correctness of your DAG - it represents your causal assumptions about the data-generating process, which should be based on substantive domain knowledge.

#### 1. Key Properties Table

This table provides a high-level overview of the DAG structure and key causal features:

- **Acyclic DAG**: Confirms the graph has no cycles (a prerequisite for valid causal analysis)
- **Causal effect identifiable**: Indicates whether the causal effect can be estimated from observational data
- **Number of paths**: Total number of paths connecting exposure and outcome
- **Number of backdoor paths**: Paths creating potential confounding that need to be blocked
- **Direct effect exists**: Whether there is a direct causal link from exposure to outcome
- **Potential mediators**: Variables that may mediate the causal effect
- **Number of adjustment sets**: How many different sets of variables could be adjusted for
- **Minimal adjustment sets**: The smallest sets of variables that block all backdoor paths

:::
