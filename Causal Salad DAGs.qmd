---
title: "Causal Salad DAGs"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: article
    embed-resources: true
    code-fold: show
    code-overflow: wrap
    code-block-bg: "#f8f8f8"
    code-block-border-left: "#31BAE9"
    fig-width: 8
    fig-height: 6
    fig-align: center
    html-math-method: katex
    css: swart-20250327.css
---

```{r setup, include=FALSE}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)

set.seed(1234)
options("digits" = 2, "width" = 150)
```

```{r libraries, echo=FALSE, warning=FALSE, message=FALSE}
# Load packages
library(tidyverse)  # For dplyr, ggplot, and friends
library(ggdag)      # For plotting DAGs
library(dagitty)    # For analyzing DAG elements
library(DiagrammeR) # For complete control of the layout
```

## FAR, AND AWAY THE BEST DAG RENDERING IS USING DiagrammeR.

There is no analysis with DiagrammeR, but the DAG is awesome, and EASY. It is displayed in the Viewer where images can be saved.

```{r DiagrammeR-DAG}
#| echo: false
#| message: false
#| warning: false

library(DiagrammeR)

grViz("
digraph DAG {
  # Graph settings
  graph [layout=neato, margin=\"0.0, 0.0, 0.0, 0.0\"]  # Increase margins (format: \"top,right,bottom,left\")
  
  # Add a title using a simple label approach
  labelloc=\"t\"
  label=\"Causal Pathways of HIV and Stroke\\nExamining direct and confounded relationships\\n \\n\"      fontname=\"Cabin\"
  fontsize=16
  
  # Node settings
  node [shape=plaintext, fontsize=16, fontname=\"Cabin\"]
  
  # Edge settings
  edge [penwidth=1.50, color=\"darkblue\", arrowsize=1.00]
  
  # Nodes with exact coordinates
  HIV [label=\"HIV\", pos=\"2.5, .5!\", fontcolor=\"dodgerblue\"]
  Stroke [label=\"Stroke\", pos=\"4,.5!\", fontcolor=\"dodgerblue\"]
  Smoking [label=\"Smoking\", pos=\"1,1.5!\"]
  Age [label=\"Age\", pos=\"1,-.5!\"]
  UC [label=\"Unmeasured\\nConfounder\", fontcolor=\"red\", pos=\"3.0,1.5!\"]
  
  # Edges
  HIV -> Stroke
  Smoking -> HIV
  Age -> Smoking
  Age -> HIV
  Age -> Stroke
  UC -> Smoking
  UC -> Stroke
  
  # Caption as a separate node at the bottom
  Caption [shape=plaintext, label=\"Figure 1: Cartoon DAG showing relationship between HIV and stroke with potential confounders.\", 
           fontsize=10, pos=\"2,-1.5!\"]
}
")

```
<br><br>

### Create a purely dagitty DAG and analyze with dagitty functions

```{r}

library(dagitty)

# Create a dagitty object that matches your DiagrammeR graph structure
dag <- dagitty::dagitty("dag {
  HIV -> Stroke
  Smoking -> HIV
  Age -> Smoking
  Age -> HIV
  Age -> Stroke
  UC -> Smoking
  UC -> Stroke
  
  HIV [exposure]
  Stroke [outcome]
}")

# Reset coordinates to match a plot() layout
dagitty::coordinates(dag) <- list(
  x = c(HIV = 2.5, Stroke = 4.0, Smoking = 1.0, Age = 1, UC = 3.0),
  y = c(HIV = 2.0, Stroke = 2.0, Smoking = 1.5, Age = 2.5, UC = 1.5)
)


# You can also plot the DAG with dagitty's plotting function

# Plot the DAG without a title
plot(dag)

# Set up title padding
par(mar = c(5, 1, 1, 1))  # c(bottom, left, top, right)

# Add a title after plotting
title(main = "Causal Pathways between HIV and Stroke", 
      cex.main = 1.5,
      col.main = "darkred",
      font.main = 2)

# Now you can use any dagitty analysis function
# Get implied conditional independencies
dagitty::impliedConditionalIndependencies(dag)

# Find adjustment sets
dagitty::adjustmentSets(dag)

# Identify paths
dagitty::paths(dag)



```
<br><br>

### Start with DiagrammeR code, create equivalent ggdag DAG and analyze with dagitty

```{r}

# Create a dagitty DAG

library(DiagrammeR)
library(dagitty)
library(ggdag)

analyze_and_visualize_dag <- function() {
  
  # Create and display the DiagrammeR visualization (unchanged from original)
  viz <- grViz("
    digraph DAG {
      # Graph settings
      graph [layout=neato, margin=\"0.0, 0.0, 0.0, 0.0\"]
      
      # Add a title using a simple label approach
      labelloc=\"t\"
      label=\"Causal Pathways of HIV and Stroke\\nExamining direct and confounded relationships\\n \\n\"
      fontname=\"Cabin\"
      fontsize=16
      
      # Node settings
      node [shape=plaintext, fontsize=16, fontname=\"Cabin\"]
      
      # Edge settings
      edge [penwidth=1.50, color=\"darkblue\", arrowsize=1.00]
      
      # Nodes with exact coordinates
      HIV [label=\"HIV\", pos=\"2.5, .5!\", fontcolor=\"dodgerblue\"]
      Stroke [label=\"Stroke\", pos=\"4,.5!\", fontcolor=\"dodgerblue\"]
      Smoking [label=\"Smoking\", pos=\"1,1.5!\"]
      Age [label=\"Age\", pos=\"1,-.5!\"]
      UC [label=\"Unmeasured\\nConfounder\", fontcolor=\"red\", pos=\"3.0,1.5!\"]
      
      # Edges
      HIV -> Stroke
      Smoking -> HIV
      Age -> Smoking
      Age -> HIV
      Age -> Stroke
      UC -> Smoking
      UC -> Stroke
      
      # Caption as a separate node at the bottom
      Caption [shape=plaintext, label=\"Figure 1: Cartoon DAG showing relationship between HIV and stroke with potential confounders.\", 
               fontsize=10, pos=\"2,-1.5!\"]
    }
  ")
  
  # Create an equivalent dagitty object for analysis 
  dag <- dagitty::dagitty("dag {
    HIV -> Stroke
    Smoking -> HIV
    Age -> Smoking
    Age -> HIV
    Age -> Stroke
    UC -> Smoking
    UC -> Stroke
    
    HIV [exposure]
    Stroke [outcome]
  }")
  
  # Set coordinates to match the DiagrammeR visualization
  dagitty::coordinates(dag) <- list(
    x = c(HIV = 2.5, Stroke = 4, Smoking = 1, Age = 1, UC = 3.0),
    y = c(HIV = 0.5, Stroke = 0.5, Smoking = 1.5, Age = -0.5, UC = 1.5)
  )
  
  # Return both objects
  return(list(
    visualization = viz,
    dag_for_analysis = dag,
    adjustment_sets = adjustmentSets(dag),
    testable_implications = impliedConditionalIndependencies(dag)
  ))
}


plot(dag)

# Use the function; returns a list named 'results'
results <- analyze_and_visualize_dag()

# Set up title padding
par(mar = c(5, 1, 1, 1))  # c(bottom, left, top, right)

# Add a title after plotting
title(main = "Causal Pathways between HIV and Stroke", 
      cex.main = 1.5,
      col.main = "darkred",
      font.main = 2)

# Display the visualization (from dataframe visualization column)
results$visualization

# View adjustment sets (from dagitty::adjustmentSets())
results$adjustment_sets

# View testable implications (from dagitty::impliedConditionalIndependencies())
results$testable_implications

```
<br><br>


### Causal Salad DAG #1 viz with ggdag and analyzed with ggdagitty

```{r causal-salad-dag1}

causal_salad_dag1 <- ggdag::dagify(
  Y ~ X + Z,
  X ~ Z,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3, Z = 2),
                y = c(X = 1, Y = 1, Z = 3)
                )
)

# using ggdag_status gives you coloring
ggdag::ggdag_status(causal_salad_dag1) +
  ggplot2::ggtitle("Causal Salad DAG #1 with Fork F") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Find all the testable implications from the DAG. If we had a dataset with columns for each of these variables, we could check if this is true by running `cor()` to see if they are related.
dagitty::impliedConditionalIndependencies(causal_salad_dag1)


# Write all the paths between `x` and `y` to console. We can see that there are two open paths between `x` and `y`:
dagitty::paths(causal_salad_dag1)


# Now, graphically
ggdag::ggdag_paths(causal_salad_dag1)

# Instead of listing out all the possible paths and identifying backdoors by hand, use the `adjustmentSets()` function in the **dagitty** package to programmatically find all the nodes that need to be adjusted. Here we see that the { Z } node needs to be controlled for to isolate the `X -> Y` relationship.
dagitty::adjustmentSets(causal_salad_dag1)

```
<br><br>

### Display Causal Saled DAG #2 with ggdag and analyze with dagitty

```{r causal-salad-dag2}

causal_salad_dag2 <- ggdag::dagify(
  Y ~ X + Z,
  X ~ Z,
  C ~ X + Y,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3, Z = 2, C = 2),
                y = c(X = 2, Y = 2, Z = 3, C = 1)
                )
)

ggdag::ggdag_status(causal_salad_dag2) +
  ggplot2::ggtitle("Causal Salad DAG #2 with Fork Z and Collider C") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend

# Find all the testable implications from the DAG. If we had a dataset with columns for each of these variables, we could check if this is true by running `cor()` to see if they are related.
dagitty::impliedConditionalIndependencies(causal_salad_dag2)

# Write all the paths between `x` and `y` to console. We can see that there are two open paths between `x` and `y`:
dagitty::paths(causal_salad_dag2)

# Now, graphically
ggdag::ggdag_paths(causal_salad_dag2) +
  ggplot2::ggtitle("Causal Salad DAG #2 with Fork Z and Collider C") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend

# Instead of listing out all the possible paths and identifying backdoors by hand, use the `adjustmentSets()` function in the **dagitty** package to programmatically find all the nodes that need to be adjusted. Here we see that only the { Z } node needs to be controlled for to isolate the `X -> Y` relationship.
dagitty::adjustmentSets(causal_salad_dag2)

# Now, graphically
ggdag::ggdag_adjustment_set(causal_salad_dag2, shadow = TRUE)



```
<br><br>

### Display Causal Saled DAG #3 with ggdag and analyze with dagitty

```{r causal-salad-dag3}

causal_salad_dag3 <- ggdag::dagify(
  Y ~ C + X + Z + B,
  X ~ Z + C + A,
  Z ~ A + B,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3, Z = 2, C = 2, A = 1, B = 3),
                y = c(X = 2, Y = 2, Z = 3, C = 1, A = 3, B = 3)
                )
)

ggdag::ggdag_status(causal_salad_dag3) +
  ggplot2::ggtitle("Causal Salad DAG #3 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Find all the testable implications from the DAG. If we had a dataset with columns for each of these variables, we could check if this is true by running `cor()` to see if they are related.
dagitty::impliedConditionalIndependencies(causal_salad_dag3)

# Write all the paths between `x` and `y` to console. We can see that there are five open paths between `x` and `y`:
dagitty::paths(causal_salad_dag3)

# Now, graphically
ggdag::ggdag_paths(causal_salad_dag3) +
  ggplot2::ggtitle("Causal Salad DAG #2 with Fork Z and Collider C") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Instead of listing out all the possible paths and identifying backdoors by hand, use the `adjustmentSets()` function in the **dagitty** package to programmatically find all the nodes that need to be adjusted. Here we see that the { B, C, Z } or the { A, C, Z } paths needs to be controlled for to isolate the `X -> Y` relationship.
dagitty::adjustmentSets(causal_salad_dag3)

# Now, graphically
ggdag::ggdag_adjustment_set(causal_salad_dag3, shadow = TRUE)

```
<br><br>


### Display Causal Saled DAG #4 with ggdag and analyze with dagitty

```{r causal-salad-dag4}

causal_salad_dag4 <- ggdag::dagify(
  Y ~ C + X + Z + B,
  # X ~ Z + C + A,
  Z ~ A + B,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3, Z = 2, C = 2, A = 1, B = 3),
                y = c(X = 2, Y = 2, Z = 3, C = 1, A = 3, B = 3)
                )
)

ggdag::ggdag_status(causal_salad_dag4) +
  ggplot2::ggtitle("Causal Salad DAG #4 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Find all the testable implications from the DAG. If we had a dataset with columns for each of these variables, we could check if this is true by running `cor()` to see if they are related.
dagitty::impliedConditionalIndependencies(causal_salad_dag4)

# Write all the paths between `x` and `y` to console. We can see that there are five open paths between `x` and `y`:
dagitty::paths(causal_salad_dag4)

# Now, graphically
ggdag::ggdag_paths(causal_salad_dag4) +
  ggplot2::ggtitle("Causal Salad DAG #4 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Instead of listing out all the possible paths and identifying backdoors by hand, use the `adjustmentSets()` function in the **dagitty** package to programmatically find all the nodes that need to be adjusted. Here we see that the { B, C, Z } or the { A, C, Z } paths needs to be controlled for to isolate the `X -> Y` relationship.
dagitty::adjustmentSets(causal_salad_dag4)

# Now, graphically
ggdag::ggdag_adjustment_set(causal_salad_dag4, shadow = TRUE)

```
<br><br>


### Visualize Causal Salad DAG #5 with ggdag and analyze with dagitty

```{r causal-salad-dag5}

causal_salad_dag5 <- ggdag::dagify(
  Y ~ X,
  Y ~ A,
  Y ~ B,
  X ~ A,
  X ~ B,
  A ~ B,
  exposure = "X",
  outcome = "Y",
  # Add labels here:
  labels = c(X = "HIV", 
             Y = "Stroke", 
             # Z = "Confounder 1", 
             # C = "Confounder 2", 
             A = "Smokimg", 
             B = "Age"),
  coords = list(x = c(X = 2, Y = 3, A = 1, B = 1),
                y = c(X = 2, Y = 2, A = 3, B = 1)
                )
)

ggdag::ggdag_status(causal_salad_dag5, use_labels = "label", text = FALSE) +
  ggplot2::ggtitle("Causal Salad DAG #5 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Find all the testable implications from the DAG. If we had a dataset with columns for each of these variables, we could check if this is true by running `cor()` to see if they are related.
dagitty::impliedConditionalIndependencies(causal_salad_dag5)

# Write all the paths between `x` and `y` to console. We can see that there are five open paths between `x` and `y`:
dagitty::paths(causal_salad_dag5)

# Now, graphically
ggdag::ggdag_paths(causal_salad_dag5, use_labels = "label") +
  ggplot2::ggtitle("Causal Salad DAG #5 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Instead of listing out all the possible paths and identifying backdoors by hand, use the `adjustmentSets()` function in the **dagitty** package to programmatically find all the nodes that need to be adjusted. Here we see that the { B, C, Z } or the { A, C, Z } paths needs to be controlled for to isolate the `X -> Y` relationship.
dagitty::adjustmentSets(causal_salad_dag5)

# Now, graphically
ggdag::ggdag_adjustment_set(causal_salad_dag5, shadow = TRUE, use_labels = "label",  label_size = 1.2)

```
<br><br>


### Visualize Causal Salad DAG #6 with ggdag and analyze with dagitty

```{r causal-salad-dag6}

# Create your DAG with the unknown node (U) influencing both A and Y
causal_salad_dag6 <- ggdag::dagify(
  Y ~ X + A + B + U,   # U influences Y
  X ~ A + B,
  A ~ B + U,           # U influences A
  exposure = "X",
  outcome = "Y",
  # Add labels here:
  labels = c(X = "HIV", 
             Y = "Stroke", 
             A = "Smoking", 
             B = "Age",
             U = "Unmeasured Confounder"),  # Label for U
  coords = list(x = c(X = 2, Y = 3, A = 1, B = 1, U = 2.5),  # Position U 
                y = c(X = 2, Y = 2, A = 3, B = 1, U = 3))  # Between A and Y vertically
)

# Create the status plot with no node circles, but with node coloring
ggdag::ggdag_status(causal_salad_dag6, use_labels = "label", text = FALSE) +
  ggplot2::ggtitle("Causal Salad DAG #6 with Multiple Forks and Colliders") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend

# Create a DAG with no nodes, just labels and arrows
ggdag::ggdag(causal_salad_dag6, 
            use_labels = "label", 
            node_size = 0,  # This hides the nodes
            text_size = 4) +  # Make text visible
  ggplot2::theme_void() + 
  ggplot2::coord_fixed(ratio = 1)

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(causal_salad_dag6)

# Write all the paths between X and Y to console
dagitty::paths(causal_salad_dag6)

# Graphically show paths
ggdag::ggdag_paths(causal_salad_dag6, use_labels = "label") +
  ggplot2::ggtitle("Causal Salad DAG #6 with Fork Z and Collider C") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend

# Find adjustment sets
dagitty::adjustmentSets(causal_salad_dag6)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(causal_salad_dag6, shadow = TRUE, use_labels = "label", label_size = 1.2)


# Show adjustment sets graphically with text only (no round nodes)
ggdag::ggdag_adjustment_set(causal_salad_dag6, 
                           shadow = TRUE, 
                           use_labels = "label", 
                           label_size = 1.2,
                           node_size = 0,    # This hides the nodes
                           text = TRUE) +    # Ensures text is displayed
  ggplot2::theme_void() +                    # Clean background
  ggplot2::ggtitle("Causal Salad DAG #4 with Multiple Forks and Colliders") +
  ggplot2::coord_fixed(ratio = 1)            # Maintain proper proportions

```
<br><br>

```{r m-bias-dag1}

# Create the M-Bias DAG
m_bias_dag1 <- ggdag::dagify(
  Y ~ X,   # X influences Y
  X ~ U,   # U influences X
  Z ~ U,   # U influences Z
  Y ~ V,   # V influences Y
  Z ~ V,   # V influences Z
  # Y ~ U,   # U influences Y
  # A ~ B,   # B influences A
  # A ~ U,   # U influences A
  exposure = "X",
  outcome = "Y",
  # # Add labels here:
  # labels = c(X = "X", 
  #            Y = "Y", 
  #            U = "U", 
  #            V = "V",
  #            Z = "Z"
  #            ),
  coords = list(x = c(X = 1, Y = 3, U = 1, V = 3, Z = 2.0),  # Position U 
                y = c(X = 1, Y = 1, U = 3, V = 3, Z = 2.5 )
                ) 
)

# Create the status plot
ggdag::ggdag_status(m_bias_dag1, text = TRUE) +
  ggplot2::ggtitle("Bad Controls - M-Bias") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(m_bias_dag1)

# Write all the paths between X and Y to console
dagitty::paths(m_bias_dag1)

# Find adjustment sets
dagitty::adjustmentSets(m_bias_dag1)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(m_bias_dag1, 
                            shadow = TRUE
                            )


```




<br><br>

```{r post-treatment-bias-dag2}

# Create the post-treatment_bias DAG
post_treatment_bias_dag2 <- ggdag::dagify(
  Z ~ X,   # X influences Z
  Z ~ U,   
  Y ~ U,   
  Y ~ Z,   
  # Z ~ V,   
  # Y ~ U,   
  # A ~ B,   
  # A ~ U,   
  exposure = "X",
  outcome = "Y",
  # # Add labels here:
  # labels = c(X = "X", 
  #            Y = "Y", 
  #            U = "U", 
  #            V = "V",
  #            Z = "Z"
  #            ),
  coords = list(x = c(X = 1, Y = 4, U = 3.0, Z = 2.5),  
                y = c(X = 1, Y = 1, U = 1.5, Z = 1.0 )
                ) 
)

# Create the status plot
ggdag::ggdag_status(post_treatment_bias_dag2, text = TRUE) +
  ggplot2::ggtitle("Bad Controls - Post-Treatment Bias") +
  theme_dag(base_size = 18) +
  labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend


# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(post_treatment_bias_dag2)

# Write all the paths between X and Y to console
dagitty::paths(post_treatment_bias_dag2)

# Find adjustment sets
dagitty::adjustmentSets(post_treatment_bias_dag2)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(post_treatment_bias_dag2, 
                            shadow = TRUE
                            )


```

<br><br>


```{r selection-bias-dag3}

# Build Selection-Bias DAG with DiagrammeR

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls - Selection Bias\\n \\n\"
    fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=36
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=36, fontname=\"Cabin\"] # Increased from 30
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.5] # Increased from 3.0 and 2.0
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"2.5, 2.0!\", fontcolor=\"black\"]
    
    # Edges
    X -> Z
    Y -> Z
    X -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\n Course in Good and Bad Controls\", 
             fontsize=20, pos=\"2.0,-1.0!\"]
  }
  ")



# Build Selection-Bias DAG with ggdag amd dagitty
selection_bias_dag3 <- ggdag::dagify(
  Z ~ X,   # X influences Z
  Z ~ Y,   
  Y ~ X,   
  # Y ~ Z,   
  # Z ~ V,   
  # Y ~ U,   
  # A ~ B,   
  # A ~ U,   
  exposure = "X",
  outcome = "Y",
  # # Add labels here:
  # labels = c(X = "X", 
  #            Y = "Y", 
  #            U = "U", 
  #            V = "V",
  #            Z = "Z"
  #            ),
  coords = list(x = c(X = 1, Z = 2.0, Y = 3),  
                y = c(X = 1, Z = 2.0, Y = 1)
                ) 
)


# Create the status plot with larger arrows and edges
ggdag::ggdag_status(selection_bias_dag3, 
                    text = TRUE,
                    node_size = 20,     # Increase node size (default is around 8-10)
                    text_size = 5,      # Increase text size 
                    edge_width = 2.0,   # Increase edge width (default is around 0.5)
                    arrow_size = 1.5) + # Increase arrow size
  ggplot2::ggtitle("Bad Controls - Selection Bias") +
  theme_dag(base_size = 18) +
  labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend




# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(selection_bias_dag3)


# Write all the paths between X and Y to console
dagitty::paths(selection_bias_dag3)


# Find adjustment sets
dagitty::adjustmentSets(selection_bias_dag3)


# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(selection_bias_dag3, 
                            shadow = TRUE
                            )


```




<br><br>


```{r modified-selection-bias-dag4}

# Build Modified Selection-Bias DAG with DiagrammeR

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls - Selection Bias\\n with Unmeasured Confounder\\n \\n \"
    fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    U [label=\"U\", pos=\"4.0, 2.0!\", fontcolor=\"darkgreen\"]
    Z [label=\"Z\", pos=\"2.5, 2.0!\", fontcolor=\"black\"]
    
    
    # Edges
    X -> Z
    X -> Y
    U -> Z
    U -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\n Course in Good and Bad Controls\", 
             fontsize=20, pos=\"2.0,0.0!\"]
  }
  ")



# Build Modified Selection-Bias DAG with ggdag amd dagitty

modified_selection_bias_dag4 <- ggdag::dagify(
  Z ~ X,   # X influences Z
  Y ~ X,   
  Y ~ U,   
  Z ~ U,   
  # Y ~ U,   
  # A ~ B,   
  # A ~ U,   
  exposure = "X",
  outcome = "Y",
  # # Add labels here:
  # labels = c(X = "X", 
  #            Y = "Y", 
  #            U = "U", 
  #            V = "V",
  #            Z = "Z"
  #            ),
  coords = list(x = c(X = 1, Z = 2.0, Y = 3, U = 3),  
                y = c(X = 1, Z = 2.0, Y = 1, U = 2)
                ) 
)


# Create the status plot with larger arrows and edges
ggdag::ggdag_status(modified_selection_bias_dag4, 
                    text = TRUE,
                    node_size = 20,     # Increase node size (default is around 8-10)
                    text_size = 5,      # Increase text size 
                    edge_width = 2.0,   # Increase edge width (default is around 0.5)
                    arrow_size = 1.5) + # Increase arrow size
  ggplot2::ggtitle("Bad Controls - Modified Selection Bias\nWith Unmeasured Confounder") +
  theme_dag(base_size = 18) +
  labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") # Disable the legend




# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(modified_selection_bias_dag4)


# Write all the paths between X and Y to console
dagitty::paths(modified_selection_bias_dag4)


# Find adjustment sets
dagitty::adjustmentSets(modified_selection_bias_dag4)


# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(modified_selection_bias_dag4, 
                            shadow = TRUE
                            )


```

<br>

```{r case-control-bias-dag5}

# Build Case-Control-Bias DAG with DiagrammeR
grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls: Case-Control Bias\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"4.0, 3.0!\", fontcolor=\"black\"]
    
    
    # Edges
    X -> Y
    Y -> Z
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")


# Build Case-Control-Bias DAG with ggdag and dagitty (only once)
case_control_bias_dag5 <- ggdag::dagify(
  Y ~ X,   
  Z ~ Y,   
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3.0, Z = 3.0),  
                y = c(X = 1, Y = 1.0, Z = 2.0)
                ) 
)

# Create the status plot with larger arrows and edges
ggdag::ggdag_status(case_control_bias_dag5, 
                    text = TRUE,
                    node_size = 20,     
                    text_size = 5,      
                    edge_width = 2.0,   
                    arrow_size = 1.5) + 
  ggplot2::ggtitle("Bad Controls: Case-Control Bias") +
  theme_dag(base_size = 18) +
  labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") 

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(case_control_bias_dag5)

# Write all the paths between X and Y to console
dagitty::paths(case_control_bias_dag5)

# Find adjustment sets
dagitty::adjustmentSets(case_control_bias_dag5)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(case_control_bias_dag5, 
                           shadow = TRUE) +
  theme_dag(base_size = 18)  # Added theme

```


<br>

```{r precision-parasite-bias-dag6}

# Build Precision Parasite-Bias DAG with DiagrammeR
grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls: Precision Parasite Bias\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"1.0, 3.0!\", fontcolor=\"black\"]
    
    
    # Edges
    X -> Y
    Z -> X
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")


# Build Precision Parasite-Bias DAG with ggdag and dagitty (only once)
precision_parasite_bias_dag6 <- ggdag::dagify(
  Y ~ X,   
  X ~ Z,   
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 3.0, Z = 1.0),  
                y = c(X = 1, Y = 1.0, Z = 2.0)
                ) 
)

# Create the status plot with larger arrows and edges
ggdag::ggdag_status(precision_parasite_bias_dag6, 
                    text = TRUE,
                    node_size = 20,     
                    text_size = 5,      
                    edge_width = 2.0,   
                    arrow_size = 1.5) + 
  ggplot2::ggtitle("Bad Controls: Precision Parasite Bias") +
  theme_dag(base_size = 18) +
  labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") 

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(precision_parasite_bias_dag6)

# Write all the paths between X and Y to console
dagitty::paths(precision_parasite_bias_dag6)

# Find adjustment sets
dagitty::adjustmentSets(precision_parasite_bias_dag6)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(precision_parasite_bias_dag6, 
                           shadow = TRUE) +
  theme_dag(base_size = 18)  # Added theme

```



##  bias-amplification-dag7

<br>

```{r bias-amplification-dag7}

# Build Bias Amplification DAG with DiagrammeR
grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls:  Bias Amplification\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"1.0, 3.0!\", fontcolor=\"black\"]
    U [label=\"U\", pos=\"2.5, 2.0!\", fontcolor=\"darkpurple\"]
    
    
    # Edges
    X -> Y
    Z -> X
    U -> X
    U -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")


# Build Bias Amplification DAG with ggdag and dagitty (only once)
peer_bias_dag8 <- ggdag::dagify(
  Y ~ X,   # Y is influenced by X
  X ~ Z,  
  X ~ U,
  Y ~ U,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 4.0, Z = 1.0, U = 2.5),  
                y = c(X = 1, Y = 1.0, Z = 2.5, U = 2.0)
                ) 
)

# Create the status plot with larger arrows and edges
ggdag::ggdag_status(bias_amplification_dag7, 
                    text = TRUE,
                    node_size = 20,     
                    text_size = 5,      
                    edge_width = 2.0,   
                    arrow_size = 1.5) + 
  ggplot2::ggtitle("Bad Controls: Bias Amplification") +
  ggdag::theme_dag(base_size = 18) +
  ggplot2::labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") 

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(bias_amplification_dag7)

# Write all the paths between X and Y to console
dagitty::paths(bias_amplification_dag7)

# Find adjustment sets
dagitty::adjustmentSets(bias_amplification_dag7)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(bias_amplification_dag7, 
                           shadow = TRUE) +
  ggdag::theme_dag(base_size = 18)  # Added theme

```

<br>

##  bias-amplification-dag7


```{r bias-amplification-dag7}

# Build Peer Bias DAG with DiagrammeR
grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls:  Bias Amplification\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=30, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=2.0] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"1.0, 3.0!\", fontcolor=\"black\"]
    U [label=\"U\", pos=\"2.5, 2.0!\", fontcolor=\"darkpurple\"]
    
    
    # Edges
    X -> Y
    Z -> X
    U -> X
    U -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")


# Build Peer Bias DAG with ggdag and dagitty (only once)
bias_amplification_dag7 <- ggdag::dagify(
  Y ~ X,   # Y is influenced by X
  X ~ Z,  
  X ~ U,
  Y ~ U,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1, Y = 4.0, Z = 1.0, U = 2.5),  
                y = c(X = 1, Y = 1.0, Z = 2.5, U = 2.0)
                ) 
)

# Create the status plot with larger arrows and edges
ggdag::ggdag_status(bias_amplification_dag7, 
                    text = TRUE,
                    node_size = 20,     
                    text_size = 5,      
                    edge_width = 2.0,   
                    arrow_size = 1.5) + 
  ggplot2::ggtitle("Bad Controls: Bias Amplification") +
  ggdag::theme_dag(base_size = 18) +
  ggplot2::labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") 

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(bias_amplification_dag7)

# Write all the paths between X and Y to console
dagitty::paths(bias_amplification_dag7)

# Find adjustment sets
dagitty::adjustmentSets(bias_amplification_dag7)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(bias_amplification_dag7, 
                           shadow = TRUE) +
  ggdag::theme_dag(base_size = 18)  # Added theme

```

<br>

##  bias-amplification-dag8


```{r peer-bias-dag8}

# Build Bias Amplification DAG with DiagrammeR
grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"1.0, 1.0, 2.0, 1.0\", rankdir=TB, size=\"14,12\"]  
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Bad Controls:  Peer Bias\\n \\n\"      fontname=\"Cabin\" fontcolor=\"darkgreen\"
    fontsize=26
    
    # Node settings - make nodes larger with fontsize
    node [shape=plaintext, fontsize=26, fontname=\"Cabin\"] # Increase
    
    # Edge settings - make edges thicker and arrows larger
    edge [penwidth=4.0, color=\"darkblue\", arrowsize=1.5] # Increase
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"4.0, 1.0!\", fontcolor=\"dodgerblue\"]
    E [label=\"E\", pos=\"2.5, 3.0!\", fontcolor=\"black\"]
    Q [label=\"Q\", pos=\"4.0, 3.0!\", fontcolor=\"darkpurple\"]
    
    
    # Edges
    X -> Y
    X -> E
    E -> Y
    Q -> Y
    Q -> E
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Cinelli, Forney, Pearl 2021 A Crash\\nCourse in Good and Bad Controls\", 
             fontsize=20, pos=\"2.5,0.0!\"]
  }
  ")


# Build Bias Amplification DAG with ggdag and dagitty (only once)
peer_bias_dag8 <- ggdag::dagify(
  Y ~ X,   # Y is influenced by X
  E ~ X,
  Y ~ E,  
  E ~ Q,
  Y ~ Q,
  exposure = "X",
  outcome = "Y",
  coords = list(x = c(X = 1.0, Y = 4.0, E = 2.5, Q = 4.0),  
                y = c(X = 1.0, Y = 1.0, E = 3.0, Q = 3.0)
                ) 
)

# Create the status plot with larger arrows and edges
ggdag::ggdag_status(peer_bias_dag8, 
                    text = TRUE,
                    node_size = 20,     
                    text_size = 5,      
                    edge_width = 2.0,   
                    arrow_size = 1.5) + 
  ggplot2::ggtitle("Bad Controls: Peer Bias") +
  ggdag::theme_dag(base_size = 18) +
  ggplot2::labs(caption = "Cinelli, Forney, Pearl 2021 A Crash Course in Good and Bad Controls") +
  ggplot2::guides(fill = "none", color = "none") 

# Find all the testable implications from the DAG
dagitty::impliedConditionalIndependencies(peer_bias_dag8)

# Write all the paths between X and Y to console
dagitty::paths(peer_bias_dag8)

# Find adjustment sets
dagitty::adjustmentSets(peer_bias_dag8)

# Show adjustment sets graphically
ggdag::ggdag_adjustment_set(peer_bias_dag8, 
                           shadow = TRUE) +
  ggdag::theme_dag(base_size = 18)  # Added theme

```








