---
title: "DAG Summary - Fork Only Structure"
author: "Dan Swart"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: article
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    code-overflow: wrap
    code-block-bg: "#FAEBD7"
    code-block-border-left: "#31BAE9"
    code-link: true          # This adds individual buttons
    fig-width: 8
    fig-height: 6
    fig-align: center
    html-math-method: katex
    css: swart-20250327.css
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)

library(tidyverse)  # For dplyr, ggplot, and friends
library(ggdag)      # For plotting DAGs
library(dagitty)    # For working with DAG logic
library(DiagrammeR) # For complete control of the layout
library(knitr)      # For controlling rendering
library(kableExtra) # For tables summarizing results
library(DT)         # For rendering content that kableExtra cannot (symbols)
```
<br>


## DAG RENDERING USING DiagrammeR.

There is no analysis with DiagrammeR, but analysis follows below.

```{r DiagrammeR-dag}
#| message: false
#| warning: false


library(DiagrammeR)

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"0.0, 0.0, 0.0, 0.0\"]  # Increase margins (format:   \"top,right,bottom,left\")
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Causal Pathways of Causal Salad DAG\\nExamining direct and confounded relationships\\n   \\n\"      fontname=\"Cabin\"
    fontsize=16
    
    # Node settings
    node [shape=plaintext, fontsize=16, fontname=\"Cabin\"]
    
    # Edge settings
    edge [penwidth=1.50, color=\"darkblue\", arrowsize=1.00]
    
    # Nodes with exact coordinates
    X [label=\"X\", pos=\"1.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Y\", pos=\"3.0, 1.0!\", fontcolor=\"dodgerblue\"]
    Z [label=\"Z\", pos=\"2.0,3.0!\", fontcolor=\"red\"]
    # Age [label=\"Age\", pos=\"1,-.5!\"]
    # UC [label=\"Unmeasured\\nConfounder\", fontcolor=\"red\", pos=\"3.0,1.5!\"]
    
    # Edges
    X -> Y
    Z -> X 
    Z -> Y
    # Age -> Smoking
    # Age -> X
    # Age -> Y
    # UC -> Smoking
    # UC -> Y
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Figure 1: Z = Fork \", 
             fontsize=10, pos=\"2,0.0!\"]
  }
  ")
```

<br>


### DAG Visualization using ggdag and dagitty

```{r}
#| label: fig-dag
#| fig-cap: "Directed Acyclic Graph with X as exposure, Y as outcome, and Z as confounder"


# Define the DAG
dag <- dagify(
  Y ~ X + Z,
  X ~ Z,
  exposure = "X",
  outcome = "Y"
)

# Set coordinates for visualization (1 = TOP, 3 = BOTTOM)
coordinates(dag) <- list(
  x = c(X = 1.0, Y = 3.0, Z = 2.0),
  y = c(X = 1.0, Y = 1.0, Z = 3.0)
)

# Create a nice visualization of the DAG
ggdag(dag) + 
  theme_dag() +
  label("DAG: X -> Y with Z as confounder")
```

## Executive Summary: Understanding Fork Structure (Confounder)

::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>What is a Fork Structure?</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}

A fork structure occurs when a common cause (Z) affects both the exposure (X) and the outcome (Y). In this DAG, Z represents a confounder that creates a non-causal association between X and Y through the backdoor path X ← Z → Y.

### Why is Adjusting for Z Necessary?
Controlling for Z in this structure is essential because:

1. It blocks the backdoor path: By conditioning on Z, we're blocking the non-causal association between X and Y that flows through Z.

1. It prevents confounding bias: Without adjusting for Z, our estimate of the effect of X on Y would be biased.

3. It enables causal identification: Controlling for Z allows us to isolate the true causal effect of X on Y.

### Real-World Example

A researcher is studying the effect of coffee consumption (X) on heart disease risk (Y):

Age (Z) affects both coffee consumption habits (X) and heart disease risk (Y).
Coffee consumption (X) might have a direct effect on heart disease risk (Y).

If the researcher doesn't control for age (Z), they might incorrectly attribute the higher heart disease risk among coffee drinkers to coffee itself, when it's actually due to the fact that older people tend to drink more coffee and also have higher heart disease risk.


### How to Handle Fork Structures

1. Identify potential confounders: Look for variables that could affect both the exposure and the outcome.

1. Adjust appropriately: Include identified confounders in your statistical model.

1. Consider unmeasured confounding: Assess whether there might be unmeasured variables creating backdoor paths.

1. Use sensitivity analysis: Test how robust your findings are to potential unmeasured confounding.

The fork structure demonstrates why adjusting for confounders is one of the most fundamental principles in causal inference, allowing us to distinguish genuine causal relationships from spurious associations.

:::

```{r causal-salad-dag1}
#| message: false
#| warning: false

# Define the DAG
dag <- dagify(
  Y ~ X + Z,
  X ~ Z,
  exposure = "X",
  outcome = "Y"
)

# Set coordinates for visualization
coordinates(dag) <- list(
  x = c(X = 1.0, Y = 3.0, Z = 2.0),
  y = c(X = 3.0, Y = 3.0, Z = 1.0)
)

# Create a function to display DAG analysis results as a table
display_dag_analysis <- function(dag) {
  # Initialize results list
  results <- list()
  
  # 1. Get the implied conditional independencies
  results$independencies <- tryCatch({
    dagitty::impliedConditionalIndependencies(dag)
  }, error = function(e) {
    "None found"
  })
  
  # 2. Find all valid adjustment sets
  results$adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag)
  }, error = function(e) {
    list()
  })
  
  # 3. Find minimal sufficient adjustment sets
  results$minimal_adjustment_sets <- tryCatch({
    dagitty::adjustmentSets(dag, type = "minimal")
  }, error = function(e) {
    list()
  })
  
  # 4. CORRECTED: Identify all paths between exposure and outcome
  # First get all possible paths (not just directed)
  results$paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y")
  }, error = function(e) {
    list(paths = character(0), open = logical(0))
  })
  
  # 5. Find instrumental variables
  results$instruments <- tryCatch({
    dagitty::instrumentalVariables(dag, exposure = "X", outcome = "Y")
  }, error = function(e) {
    NULL
  })
  
  # 6. Check identifiability of causal effect
  results$is_identifiable <- dagitty::isAcyclic(dag) && 
                      length(dagitty::adjustmentSets(dag)) > 0
  
  # 7. Find ancestors and descendants
  results$X_ancestors <- dagitty::ancestors(dag, "X")
  results$X_descendants <- dagitty::descendants(dag, "X")
  results$Y_ancestors <- dagitty::ancestors(dag, "Y")
  results$Y_descendants <- dagitty::descendants(dag, "Y")
  
  # 8. CORRECTED: Check backdoor paths
  results$backdoor_paths <- character(0)
  if (!is.null(results$paths) && !is.null(results$paths$paths)) {
    for (i in 1:length(results$paths$paths)) {
      path_str <- results$paths$paths[i]
      if (grepl("<-", path_str)) {
        results$backdoor_paths <- c(results$backdoor_paths, path_str)
      }
    }
  }
  
  # 9. CORRECTED: Find directed paths (potential mediation)
  results$directed_paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y", directed = TRUE)
  }, error = function(e) {
    list(paths = character(0), open = logical(0))
  })
  
  # Check for mediators in directed paths
  results$mediators <- character(0)
  if (!is.null(results$directed_paths) && !is.null(results$directed_paths$paths)) {
    for (i in 1:length(results$directed_paths$paths)) {
      path_str <- results$directed_paths$paths[i]
      # Skip direct X->Y paths
      if (path_str == "X -> Y") {
        next
      }
      
      # Extract variables using regex
      path_vars <- unlist(strsplit(gsub(" -> | <- ", " ", path_str), " "))
      
      # Variables between X and Y are mediators
      if (length(path_vars) > 2) {
        potential_mediators <- path_vars[-c(1, length(path_vars))]
        results$mediators <- c(results$mediators, potential_mediators)
      }
    }
    results$mediators <- unique(results$mediators)
  }
  
  # 10. Test d-separation
  results$d_sep_results <- list(
    XY_given_nothing = dagitty::dseparated(dag, "X", "Y", c()),
    XY_given_Z = dagitty::dseparated(dag, "X", "Y", c("Z"))
  )
  
  # 11. CORRECTED: Check paths under different adjustments
  results$adjustment_effects <- list()
  adjustment_sets_to_check <- list(
    "None" = c(),
    "Z" = c("Z")
  )
  
  for (adj_name in names(adjustment_sets_to_check)) {
    adj_set <- adjustment_sets_to_check[[adj_name]]
    
    # Get all paths for total count
    all_paths <- tryCatch({
      dagitty::paths(dag, from = "X", to = "Y")
    }, error = function(e) {
      list(paths = character(0), open = logical(0))
    })
    
    # Get open paths after adjustment
    open_paths <- tryCatch({
      dagitty::paths(dag, from = "X", to = "Y", Z = adj_set)
    }, error = function(e) {
      list(paths = character(0), open = logical(0))
    })
    
    # Count paths
    all_paths_count <- ifelse(is.null(all_paths) || is.null(all_paths$paths), 0, 
                             length(all_paths$paths))
    open_paths_count <- ifelse(is.null(open_paths) || is.null(open_paths$paths), 0, 
                              length(open_paths$paths))
    
    # Store results
    results$adjustment_effects[[adj_name]] <- list(
      "total_paths" = all_paths_count,
      "open_paths" = open_paths_count
    )
  }
  
  # 12. Check impact of unmeasured confounding
  results$unmeasured_impact <- list()
  all_vars <- names(dagitty::coordinates(dag)$x)
  
  for (var in all_vars) {
    if (var != "X" && var != "Y") {
      # Create a DAG where this variable is latent
      dag_modified <- dag
      latent_vars <- dagitty::latents(dag_modified)
      dagitty::latents(dag_modified) <- c(latent_vars, var)
      
      # Check adjustment sets
      adj_sets_original <- dagitty::adjustmentSets(dag)
      adj_sets_modified <- tryCatch({
        dagitty::adjustmentSets(dag_modified)  
      }, error = function(e) {
        list()
      })
      
      results$unmeasured_impact[[var]] <- list(
        "original_sets" = length(adj_sets_original),
        "modified_sets" = length(adj_sets_modified)
      )
    }
  }
  
  return(results)
}

# Run the analysis
dag_results <- display_dag_analysis(dag)

# CORRECTED: Key DAG Properties
properties_df <- data.frame(
  Property = c(
    "Acyclic DAG", 
    "Causal effect identifiable",
    "Number of paths from X to Y",
    "Number of backdoor paths",
    "Number of directed paths",
    "Direct effect of X on Y exists",
    "Potential mediators",
    "Number of adjustment sets",
    "Minimal adjustment sets"
  ),
  Value = c(
    ifelse(dagitty::isAcyclic(dag), "Yes", "No"),
    ifelse(dag_results$is_identifiable, "Yes", "No"),
    # CORRECTED path counting
    ifelse(is.null(dag_results$paths) || is.null(dag_results$paths$paths), 0, 
           length(dag_results$paths$paths)),
    length(dag_results$backdoor_paths),
    # CORRECTED directed paths count
    ifelse(is.null(dag_results$directed_paths) || is.null(dag_results$directed_paths$paths), 0, 
           length(dag_results$directed_paths$paths)),
    # Direct effect check
    ifelse("X" %in% names(dagitty::parents(dag, "Y")), "Yes", "No"),
    ifelse(length(dag_results$mediators) > 0, paste(dag_results$mediators, collapse=", "), "None"),
    length(dag_results$adjustment_sets),
    ifelse(length(dag_results$minimal_adjustment_sets) > 0, 
           paste(sapply(dag_results$minimal_adjustment_sets, function(x) paste(x, collapse=", ")), collapse="; "), 
           "None")
  )
)

# Table 2: Conditional Independencies
if(length(dag_results$independencies) > 0 && !is.character(dag_results$independencies)) {
  independencies_df <- data.frame(
    Index = 1:length(dag_results$independencies),
    Independence = sapply(dag_results$independencies, function(x) paste(x, collapse=" "))
  )
} else {
  independencies_df <- data.frame(
    Index = 1,
    Independence = "No conditional independencies found"
  )
}

# CORRECTED: Paths Analysis
if(!is.null(dag_results$paths) && !is.null(dag_results$paths$paths) && length(dag_results$paths$paths) > 0) {
  paths_df <- data.frame(
    Path = dag_results$paths$paths,
    IsBackdoor = sapply(dag_results$paths$paths, function(p) {
      grepl("<-", p)
    }),
    IsDirected = sapply(dag_results$paths$paths, function(p) {
      !grepl("<-", p) && grepl("->", p)
    })
  )
} else {
  paths_df <- data.frame(
    Path = "No paths found",
    IsBackdoor = NA,
    IsDirected = NA
  )
}

# Table 4: Ancestors and Descendants
ancestors_descendants_df <- data.frame(
  Variable = c("X", "Y", "Z"),
  Ancestors = c(
    paste(dag_results$X_ancestors, collapse=", "),
    paste(dag_results$Y_ancestors, collapse=", "),
    ""  # Placeholder for Z
  ),
  Descendants = c(
    paste(dag_results$X_descendants, collapse=", "),
    paste(dag_results$Y_descendants, collapse=", "),
    ""  # Placeholder for Z
  )
)

# Table 5: D-separation Results
d_sep_df <- data.frame(
  Variables = c("X and Y", "X and Y"),
  Conditioning_On = c("{ }", "Z"),
  Is_D_Separated = c(
    ifelse(dag_results$d_sep_results$XY_given_nothing, "Yes", "No"),
    ifelse(dag_results$d_sep_results$XY_given_Z, "Yes", "No")
  )
)

# Table 6: Impact of Adjustments
adjustment_effect_df <- data.frame(
  Adjustment_Set = names(dag_results$adjustment_effects),
  Total_Paths = sapply(dag_results$adjustment_effects, function(x) x$total_paths),
  Open_Paths = sapply(dag_results$adjustment_effects, function(x) x$open_paths)
)

# Table 7: Unmeasured Confounding
if(length(dag_results$unmeasured_impact) > 0) {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = names(dag_results$unmeasured_impact),
    Original_Adjustment_Sets = sapply(dag_results$unmeasured_impact, function(x) x$original_sets),
    Adjusted_Sets_When_Unmeasured = sapply(dag_results$unmeasured_impact, function(x) x$modified_sets)
  )
} else {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = "None",
    Original_Adjustment_Sets = NA,
    Adjusted_Sets_When_Unmeasured = NA
  )
}

# Instrument variables table
if(!is.null(dag_results$instruments) && length(dag_results$instruments) > 0) {
  instruments_df <- data.frame(
    Instruments = dag_results$instruments
  )
} else {
  instruments_df <- data.frame(
    Instruments = "No valid instrumental variables found"
  )
}

# Create a nice visualization of the DAG
dag_plot <- ggdag(dag) + 
  theme_dag() +
  label("DAG: X -> Y with Z as confounder")
```

## 2. Results

### 2.1 Key DAG Properties

```{r}
#| echo: false
#| label: tbl-key-properties
#| tbl-cap: "Key Properties of the DAG"

DT::datatable(
  properties_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.2 Conditional Independencies

```{r}
#| label: tbl-independencies
#| tbl-cap: "Implied Conditional Independencies"

DT::datatable(
  independencies_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.3 Paths Between X and Y

```{r}
#| label: tbl-paths
#| tbl-cap: "All Paths Between X and Y"

DT::datatable(
  paths_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.4 Ancestors and Descendants

```{r}
#| label: tbl-ancestors-descendants
#| tbl-cap: "Ancestors and Descendants"

DT::datatable(
  ancestors_descendants_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.5 D-Separation Results

```{r}
#| label: tbl-d-separation
#| tbl-cap: "D-Separation Test Results"

DT::datatable(
  d_sep_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.6 Impact of Adjustments

```{r}
#| label: tbl-adjustments
#| tbl-cap: "Effect of Different Adjustment Sets"

DT::datatable(
  adjustment_effect_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.7 Unmeasured Confounding Impact

```{r}
#| label: tbl-unmeasured
#| tbl-cap: "Impact of Treating Variables as Unmeasured"

DT::datatable(
  unmeasured_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```

### 2.8 Instrumental Variables

```{r}
#| label: tbl-instruments
#| tbl-cap: "Potential Instrumental Variables"

DT::datatable(
  instruments_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```


### 3. Visualizing Status, Adjustment Sets and Paths with ggdag

```{r}
#| label: fig-dag-visualizations
#| fig-cap: "Different visualizations of the DAG"
#| fig-subcap: 
#|   - "Status Plot: Exposure and Outcome"
#|   - "Adjustment Sets for X → Y"
#|   - "All Paths between X and Y"
#| layout-ncol: 1

# Create dagitty object with ggdag positioning
dag <- dagitty("dag {
  X -> Y
  Z -> X
  Z -> Y
  
  X [exposure]
  Y [outcome]
}")

# Set coordinates for visualization in digatty format (1 = TOP, 3 = BOTTOM)
coordinates(dag) <- list(
  x = c(X = 1.0, Y = 3.0, Z = 2.0),
  y = c(X = 1.0, Y = 1.0, Z = 3.0)
)

# Convert to ggdag format
dag_tidy <- tidy_dagitty(dag)

# Status plot showing exposure/outcome
ggdag_status(dag_tidy) +
  theme_dag() +
  label("Status Plot: Exposure and Outcome")

# Adjustment set visualization
ggdag_adjustment_set(dag_tidy) +
  theme_dag() +
  label("Adjustment Sets for X → Y")

# Paths visualization
ggdag_paths(dag_tidy) +
  theme_dag() +
  label("All Paths between X and Y")
```



::: {.callout-note collapse="true"}
# DAG Analysis Glossary - Click to Open and Close

### Key DAG Terms and Concepts

**DAG (Directed Acyclic Graph)**: A graphical representation of causal relationships where arrows indicate the direction of causality, and no variable can cause itself through any path (hence "acyclic").

**Exposure**: The variable whose causal effect we want to estimate (often called the treatment or independent variable).

**Outcome**: The variable we are interested in measuring the effect on (often called the dependent variable).

**Confounder**: A variable that influences both the exposure and the outcome, potentially creating a spurious association between them.

**Mediator**: A variable that lies on the causal pathway between the exposure and outcome (exposure → mediator → outcome).

**Collider**: A variable that is influenced by both the exposure and the outcome, or by two variables on a path (e.g., A → C ← B).

**Backdoor path**: Any non-causal path connecting the exposure to the outcome that creates a spurious association.

### Understanding the Analysis Tables

#### 1. Key Properties Table

This table provides a high-level overview of the DAG structure and key causal features:

- **Acyclic DAG**: Confirms the graph has no cycles (a prerequisite for valid causal analysis)
- **Causal effect identifiable**: Indicates whether the causal effect can be estimated from observational data
- **Number of paths**: Total number of paths connecting exposure and outcome
- **Number of backdoor paths**: Paths creating potential confounding that need to be blocked
- **Direct effect exists**: Whether there is a direct causal link from exposure to outcome
- **Potential mediators**: Variables that may mediate the causal effect
- **Number of adjustment sets**: How many different sets of variables could be adjusted for
- **Minimal adjustment sets**: The smallest sets of variables that block all backdoor paths

#### 2. Conditional Independencies Table

Shows the implied conditional independencies in the DAG - pairs of variables that should be statistically independent when conditioning on specific other variables. These can be used to test the validity of your DAG against observed data.

#### 3. Paths Analysis Table

Enumerates all paths connecting the exposure to the outcome:

- **Path**: The specific variables and connections in each path
- **Length**: Number of edges in the path
- **IsBackdoor**: Whether this is a backdoor path (potential source of confounding)
- **IsDirected**: Whether this is a directed path from exposure to outcome

Testing whether these paths are open or closed under different conditioning strategies is crucial for causal inference.

#### 4. Ancestors and Descendants Table

Shows which variables can causally affect (ancestors) or be affected by (descendants) each variable in the DAG:

- Understanding ancestry relationships helps identify potential confounders
- Descendants should not be controlled for as this may introduce bias

#### 5. D-Separation Results Table

Shows whether exposure and outcome are conditionally independent (d-separated) when conditioning on different variable sets:

- **Is_D_Separated = Yes**: This set of conditioning variables blocks all non-causal paths
- **Is_D_Separated = No**: Some non-causal association remains

This helps identify sufficient adjustment sets for estimating causal effects.

#### 6. Impact of Adjustments Table

Shows how different adjustment strategies affect the identification of causal effects:

- **Total_Paths**: Total number of paths between exposure and outcome
- **Open_Paths**: Number of paths that remain open after adjustment
  
Ideally, adjusting for the right variables leaves only the causal paths open.

#### 7. Unmeasured Confounding Impact Table

Simulates the effect of being unable to measure certain variables:

- **Original_Adjustment_Sets**: Number of valid adjustment sets with all variables measured
- **Adjusted_Sets_When_Unmeasured**: Number of valid adjustment sets when this variable is unmeasured

This helps identify which variables are most critical to measure for valid causal inference.

#### 8. Instrumental Variables Table

Lists potential instrumental variables - variables that affect the exposure but have no direct effect on the outcome except through the exposure. These are useful for causal inference when confounding is present, especially in methods like instrumental variable estimation.

### How to Use This Analysis for Causal Inference

1. **Identify minimal sufficient adjustment sets**: These are the variables you should control for in your analysis to remove confounding.

2. **Avoid conditioning on colliders**: This can introduce bias. Check the paths and d-separation results to ensure your adjustment strategy doesn't open non-causal paths.

3. **Validate your DAG**: Use the implied conditional independencies to test your causal assumptions against observed data.

4. **Assess sensitivity to unmeasured confounding**: The unmeasured confounding analysis helps understand how robust your conclusions might be.

5. **Consider mediation analysis**: If mediators are present, you might want to decompose total effects into direct and indirect components.

6. **Look for instrumental variables**: These can help establish causality even in the presence of unmeasured confounding.

Remember that the validity of any causal inference depends on the correctness of your DAG - it represents your causal assumptions about the data-generating process, which should be based on substantive domain knowledge.

:::
