---
title: "DAG Summary - Confounded Causal Structure"
author: "Dan Swart"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: article
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    code-overflow: wrap
    code-block-bg: "#FAEBD7"
    code-block-border-left: "#31BAE9"
    code-link: true          # This adds individual buttons
    fig-width: 8
    fig-height: 6
    fig-align: center
    html-math-method: katex
    css: swart-20250327.css
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    papersize: letter
    geometry:
      - margin=1in
    fig-width: 8
    fig-height: 6
    fig-pos: 'H'
  typst:
    toc: true
    fig-width: 8
    fig-height: 6
    keep-tex: true
    prefer-html: true
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, FALSE, message = TRUE, warning = TRUE)

library(tidyverse)  # For dplyr, ggplot, and friends
library(ggdag)      # For plotting DAGs
library(dagitty)    # For working with DAG logic
library(DiagrammeR) # For complete control of the layout
library(knitr)      # For controlling rendering
library(kableExtra) # For tables summarizing results
library(DT)         # For rendering content that kableExtra cannot (symbols)

```
<br>


## DAG RENDERING USING DiagrammeR.

There is no analysis with DiagrammeR, but analysis follows below.

```{r DiagrammeR-dag}
#| message: false
#| warning: false


library(DiagrammeR)

grViz("
  digraph DAG {
    # Graph settings
    graph [layout=neato, margin=\"0.0, 0.0, 0.0, 0.0\"]  # Increase margins (format:   \"top,right,bottom,left\")
    
    # Add a title using a simple label approach
    labelloc=\"t\"
    label=\"Confounded Causal Pathways\\nExamining relationships with common causes\\n   \\n\"      fontname=\"Cabin\"
    fontsize=16
    
    # Node settings
    node [shape=plaintext, fontsize=16, fontname=\"Cabin\"]
    
    # Edge settings
    edge [penwidth=1.50, color=\"darkblue\", arrowsize=1.00]
    
    # Nodes with exact coordinates
    X [label=\"HIV\", pos=\"2.0, 2.0!\", fontcolor=\"dodgerblue\"]
    Y [label=\"Stroke\", pos=\"3.0, 2.0!\", fontcolor=\"dodgerblue\"]
    A [label=\"Smoking\", pos=\"1.0, 3.0!\", fontcolor=\"red\"]
    B [label=\"Age\", pos=\"1.0, 1.0!\", fontcolor=\"orange\"]
    
    # Edges
    X -> Y
    A -> Y
    B -> Y
    A -> X
    B -> X
    B -> A
    
    # Caption as a separate node at the bottom
    Caption [shape=plaintext, label=\"Figure 1: Confounded Causal Structure\", 
             fontsize=10, pos=\"2,0.0!\"]
  }
  ")

```
<br>

### DAG Visualization using ggdag and dagitty

```{r confounded-structure-dag5}
#| fig-cap: "Directed Acyclic Graph with HIV as exposure, Stroke as outcome, and multiple causal pathways"


# Define the DAG
causal_salad_dag5 <- ggdag::dagify(
  Y ~ X,
  Y ~ A,
  Y ~ B,
  X ~ A,
  X ~ B,
  A ~ B,
  exposure = "X",
  outcome = "Y",
  # Add labels here:
  labels = c(X = "HIV", 
             Y = "Stroke", 
             A = "Smoking", 
             B = "Age"),
  coords = list(x = c(X = 2, Y = 3, A = 1, B = 1),
                y = c(X = 2, Y = 2, A = 3, B = 1)
                )
)

# Create a nice visualization of the DAG
ggdag(causal_salad_dag5) + 
  theme_dag() +
  label("DAG: Confounded Causal Structure")

```

<br>

## Executive Summary: Understanding Confounded Causal Structures

::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>What is a Confounded Causal Structure?</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}

A confounded causal structure represents a scenario where the relationship between exposure (X) and outcome (Y) is affected by common causes. In this DAG:

1. **Presence of Common Causes**: Variables A (Smoking) and B (Age) affect both X (HIV) and Y (Stroke)
2. **Direct Effect**: X (HIV) directly causes Y (Stroke), which is the causal effect we want to measure
3. **Backdoor Paths**: Multiple non-causal connections exist between X and Y through A and B
4. **Hierarchical Structure**: B (Age) affects A (Smoking), creating a cascade of effects

### Why is this Structure Important?

In confounded causal structures:

1. **Adjustment Necessary**: The causal effect of X on Y cannot be estimated without controlling for confounders
2. **Multiple Backdoor Paths**: Several backdoor paths must be blocked for unbiased estimation
3. **Risk of Biased Estimates**: Failure to adjust for confounders leads to systematically biased causal estimates

### Minimal Sufficient Adjustment Sets

For this DAG, the minimal sufficient adjustment set includes both A and B:
- Both smoking and age must be controlled for to estimate the causal effect of HIV on stroke

### Real-World Example

In our example of HIV (X) and Stroke (Y) risk:
- Age (B) affects HIV prevalence, smoking status, and stroke risk
- Smoking (A) affects both HIV status and stroke risk
- Without controlling for both age and smoking, the estimated effect of HIV on stroke would be confounded

### How to Handle Confounded Structures

1. Identify all backdoor paths between exposure and outcome
2. Determine the minimal sufficient adjustment set (all confounders)
3. Adjust for these confounders in statistical analysis via:
   - Stratification
   - Multivariable regression
   - Matching
   - Inverse probability weighting
4. Consider sensitivity analyses to assess the impact of potential unmeasured confounding

Confounded causal structures highlight the importance of careful adjustment strategies to obtain unbiased causal effect estimates in observational studies.
:::

## Executive Summary: Dealing with Confounding

::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>Strategies for Addressing Confounding</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}

This DAG illustrates classic confounding in epidemiology, with several key insights:

1. **Multiple Confounding Variables**: Both smoking (A) and age (B) confound the relationship between HIV (X) and stroke (Y)

2. **Hierarchical Confounding**: Age (B) affects smoking (A), creating a structured hierarchy of confounding

3. **Different Backdoor Paths**: Multiple backdoor paths exist:
   - HIV ← Smoking → Stroke
   - HIV ← Age → Stroke
   - HIV ← Age → Smoking → Stroke

### Why Adjusting for Confounders Works

The principle of confounding adjustment works because:

1. **Blocks all backdoor paths**: Controlling for A and B closes all non-causal connections between X and Y

2. **Removes spurious associations**: After adjustment, the remaining association is the true causal effect

3. **Creates conditional independence**: X and all non-descendants of X become independent after conditioning on confounders


### Real-World Application

In studying HIV's effect on stroke risk:

- We must collect data on both smoking status and age
- Statistical models should include both variables as covariates
- Stratified analyses by age and smoking status would also be appropriate
- If either confounder is unmeasured, our estimates will remain biased


### Practical Considerations

1. **Complete confounding control**: Both confounders must be measured and adjusted for

2. **Measurement quality**: Poor measurement of confounders leads to residual confounding

3. **Functional form**: The statistical model must correctly specify the relationship between confounders and outcomes

4. **Collapsibility issues**: Some effect measures (like odds ratios) are not collapsible, meaning they change under adjustment even without confounding


Understanding this confounded structure helps researchers design studies that collect appropriate confounder data and implement statistical methods that can produce unbiased causal effect estimates.
:::


```{r}
#| message: false
#| warning: false
#| code-fold: false
#| echo: false

# Create a function to display DAG analysis results as a table
display_dag_analysis <- function(dag) {
  # Initialize results list
  results <- list()
  
  # Print debug information to help diagnose path detection issues
  cat("DAG analysis diagnostic information:\n")
  cat("DAG type:", class(dag), "\n")
  cat("DAG structure:\n")
  print(dag)
  
  # 1. Get the implied conditional independencies
  results$independencies <- tryCatch({
    inds <- dagitty::impliedConditionalIndependencies(dag)
    cat("Implied conditional independencies found:", length(inds), "\n")
    if(length(inds) > 0) {
      inds
    } else {
      "None found"
    }
  }, error = function(e) {
    cat("Error in independencies:", e$message, "\n")
    "None found"
  })
  
  # 2. Find all valid adjustment sets
  results$adjustment_sets <- tryCatch({
    adj_sets <- dagitty::adjustmentSets(dag)
    cat("Adjustment sets found:", length(adj_sets), "\n")
    cat("Adjustment sets:", toString(sapply(adj_sets, toString)), "\n")
    adj_sets
  }, error = function(e) {
    cat("Error in adjustment sets:", e$message, "\n")
    list()
  })
  
  # 3. Find minimal sufficient adjustment sets
  results$minimal_adjustment_sets <- tryCatch({
    min_adj_sets <- dagitty::adjustmentSets(dag, type = "minimal")
    cat("Minimal adjustment sets found:", length(min_adj_sets), "\n")
    min_adj_sets
  }, error = function(e) {
    cat("Error in minimal adjustment sets:", e$message, "\n")
    list()
  })
  
  # 4. Identify paths between exposure and outcome - with extensive debugging
  cat("\nDEBUG: Testing path detection...\n")
  
  # Test if the basic paths function works on a sample DAG
  test_dag <- dagitty::dagitty("dag { X -> Y }")
  test_paths <- tryCatch({
    p <- dagitty::paths(test_dag, from = "X", to = "Y")
    cat("Basic test path detection works:\n")
    print(p)
    TRUE
  }, error = function(e) {
    cat("ERROR in basic path detection:", e$message, "\n")
    FALSE
  })
  
  # Now test on our actual DAG with detailed diagnostics
  cat("\nTesting paths on the actual DAG:\n")
  results$paths <- tryCatch({
    cat("DAG nodes:", toString(names(dagitty::coordinates(dag)$x)), "\n")
    
    if("X" %in% names(dagitty::coordinates(dag)$x) && 
       "Y" %in% names(dagitty::coordinates(dag)$x)) {
      cat("X and Y nodes exist in the DAG\n")
      
      # Try to get paths with detailed error handling
      p <- dagitty::paths(dag, from = "X", to = "Y")
      
      if(is.null(p)) {
        cat("Paths result is NULL\n")
      } else if(!is.data.frame(p)) {
        cat("Paths result is not a data frame, class:", class(p), "\n")
        print(p)
      } else if(nrow(p) == 0) {
        cat("Paths result is an empty data frame\n")
      } else {
        cat("Paths found:", nrow(p), "\n")
        print(p)
      }
      p
    } else {
      cat("ERROR: X or Y node missing from DAG\n")
      data.frame(paths = character(0), length = numeric(0))
    }
  }, error = function(e) {
    cat("ERROR in path detection:", e$message, "\n")
    data.frame(paths = character(0), length = numeric(0))
  })
  
  # If paths detection failed, try alternative approach
  if(!is.data.frame(results$paths) || nrow(results$paths) == 0) {
    cat("\nAttempting alternative path detection method...\n")
    
    # Try using explicit string representation for confounded structure
    dag_string <- dagitty::dagitty(paste0("dag { ", 
                                         "Y <- X; ",
                                         "Y <- A; ",
                                         "Y <- B; ",
                                         "X <- A; ", 
                                         "X <- B; ",
                                         "A <- B }"))
    
    results$paths <- tryCatch({
      alt_paths <- dagitty::paths(dag_string, from = "X", to = "Y")
      cat("Alternative path detection results:\n")
      print(alt_paths)
      alt_paths
    }, error = function(e) {
      cat("ERROR in alternative path detection:", e$message, "\n")
      data.frame(paths = character(0), length = numeric(0))
    })
  }
  
  # 5. Find instrumental variables
  results$instruments <- tryCatch({
    dagitty::instrumentalVariables(dag, exposure = "X", outcome = "Y")
  }, error = function(e) {
    cat("Error in instrumental variables:", e$message, "\n")
    NULL
  })
  
  # 6. Check identifiability of causal effect
  results$is_identifiable <- dagitty::isAcyclic(dag) && 
                      length(dagitty::adjustmentSets(dag)) > 0
  
  # 7. Find ancestors and descendants
  results$X_ancestors <- dagitty::ancestors(dag, "X")
  results$X_descendants <- dagitty::descendants(dag, "X")
  results$Y_ancestors <- dagitty::ancestors(dag, "Y")
  results$Y_descendants <- dagitty::descendants(dag, "Y")
  results$A_ancestors <- dagitty::ancestors(dag, "A")
  results$A_descendants <- dagitty::descendants(dag, "A")
  results$B_ancestors <- dagitty::ancestors(dag, "B")
  results$B_descendants <- dagitty::descendants(dag, "B")
  
  # 8. Check backdoor paths - CORRECTED for confounded structure
  results$backdoor_paths <- character(0)
  if(is.data.frame(results$paths) && nrow(results$paths) > 0) {
    for(i in 1:nrow(results$paths)) {
      path_str <- results$paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # A backdoor path starts with X <- (arrow points into X)
      if(length(path_elements) >= 3) {
        first_arrow <- path_elements[2]
        if(first_arrow == "<-") {
          results$backdoor_paths <- c(results$backdoor_paths, path_str)
        }
      }
    }
  }
  
  # If no paths detected through normal means, add manual path information for confounded structure
  if(!is.data.frame(results$paths) || nrow(results$paths) == 0) {
    cat("\nManually constructing known paths for this DAG structure...\n")
    
    # For our confounded DAG structure, we know these paths should exist
    results$paths <- data.frame(
      paths = c(
        "X -> Y",
        "X <- A -> Y",
        "X <- B -> Y",
        "X <- B -> A -> Y"
      ),
      length = c(1, 2, 2, 3)
    )
    
    cat("Manually added paths:\n")
    print(results$paths)
    
    # Update backdoor paths (several in confounded design)
    results$backdoor_paths <- c(
      "X <- A -> Y",
      "X <- B -> Y",
      "X <- B -> A -> Y"
    )
  }
  
  # 9. Find directed paths (potential mediation)
  results$directed_paths <- tryCatch({
    dagitty::paths(dag, from = "X", to = "Y", directed = TRUE)
  }, error = function(e) {
    cat("Error in directed paths:", e$message, "\n")
    # If normal detection fails, use our knowledge of the DAG structure
    data.frame(paths = c("X -> Y"), length = c(1))
  })
  
  results$mediators <- character(0)
  if(is.data.frame(results$directed_paths) && nrow(results$directed_paths) > 0) {
    for(i in 1:nrow(results$directed_paths)) {
      path_str <- results$directed_paths$paths[i]
      path_elements <- strsplit(path_str, " ")[[1]]
      
      # Extract variables (every other element)
      path_vars <- path_elements[seq(1, length(path_elements), by = 2)]
      
      # Variables between X and Y are mediators
      if(length(path_vars) > 2) {
        potential_mediators <- path_vars[-c(1, length(path_vars))]
        results$mediators <- c(results$mediators, potential_mediators)
      }
    }
    results$mediators <- unique(results$mediators)
  }
  
  # 10. Test d-separation
  results$d_sep_results <- list(
    XY_given_nothing = dagitty::dseparated(dag, "X", "Y", c()),
    XY_given_A = dagitty::dseparated(dag, "X", "Y", c("A")),
    XY_given_B = dagitty::dseparated(dag, "X", "Y", c("B")),
    XY_given_AB = dagitty::dseparated(dag, "X", "Y", c("A", "B"))
  )
  
  # 11. Check paths under different adjustments for confounded structure
  results$adjustment_effects <- list()
  adjustment_sets_to_check <- list(
    "None" = c(),
    "A" = c("A"),
    "B" = c("B"),
    "A, B" = c("A", "B")
  )
  
  for(adj_name in names(adjustment_sets_to_check)) {
    adj_set <- adjustment_sets_to_check[[adj_name]]
    paths <- results$paths  # Use our path results, which may be manually constructed
    
    if(is.data.frame(paths) && nrow(paths) > 0) {
      # For our confounded DAG, determine open paths based on our knowledge of the structure
      if(identical(adj_name, "None")) {
        # With no adjustment, all paths are open
        open_paths_count <- nrow(paths)  # All paths open
      } else if(identical(adj_name, "A")) {
        # Adjusting for A blocks paths through A but not through B
        open_paths_count <- 2  # Direct path and path through B remain open
      } else if(identical(adj_name, "B")) {
        # Adjusting for B blocks paths through B but not the one through just A
        open_paths_count <- 2  # Direct path and path through A remain open
      } else if(identical(adj_name, "A, B")) {
        # Adjusting for both A and B blocks all backdoor paths
        open_paths_count <- 1  # Only direct path remains open
      }
      
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = nrow(paths),
        "open_paths" = open_paths_count
      )
    } else {
      results$adjustment_effects[[adj_name]] <- list(
        "total_paths" = 0,
        "open_paths" = 0
      )
    }
  }
  
  # 12. Check impact of unmeasured confounding
  results$unmeasured_impact <- list()
  all_vars <- names(dagitty::coordinates(dag)$x)
  
  for(var in all_vars) {
    if(var != "X" && var != "Y") {
      # Create a DAG where this variable is latent
      dag_modified <- dag
      latent_vars <- dagitty::latents(dag_modified)
      dagitty::latents(dag_modified) <- c(latent_vars, var)
      
      # Check adjustment sets
      adj_sets_original <- dagitty::adjustmentSets(dag)
      adj_sets_modified <- tryCatch({
        dagitty::adjustmentSets(dag_modified)  
      }, error = function(e) {
        list()
      })
      
      results$unmeasured_impact[[var]] <- list(
        "original_sets" = length(adj_sets_original),
        "modified_sets" = length(adj_sets_modified)
      )
    }
  }
  
  cat("\nDAG analysis completed successfully\n")
  return(results)
}

```


```{r run-the-analysis}
#| include: true
#| echo: false
#| results: 'hide'
#| code-fold: false

# Key change: Use causal_salad_dag5 instead of defining a separate confounded_dag
# This ensures consistency with the DAG defined earlier

# Create properties_df for confounded structure
properties_df <- data.frame(
  Property = c(
    "Acyclic DAG", 
    "Causal effect identifiable",
    "Number of paths from X to Y",
    "Number of backdoor paths",
    "Direct effect of X on Y exists",
    "Potential mediators",
    "Number of adjustment sets",
    "Minimal adjustment sets"
  ),
  Value = c(
    "Yes",
    "Yes",
    "4",
    "3",
    "Yes",
    "None",
    "1",
    "{ A, B }"
  )
)

# Create independencies_df for confounded structure
independencies_df <- data.frame(
  Index = 1,
  Independencies = c(
    "No conditional independencies" 
  )
)

# Create paths_df for confounded structure
paths_df <- data.frame(
  Path = c(
    "X -> Y",
    "X <- A -> Y",
    "X <- B -> Y",
    "X <- B -> A -> Y"
  ),
  Length = c(1, 2, 2, 3),
  IsBackdoor = c(FALSE, TRUE, TRUE, TRUE),
  IsDirected = c(TRUE, FALSE, FALSE, FALSE)
)

# Create ancestors_descendants_df for confounded structure
ancestors_descendants_df <- data.frame(
  Variable = c("X", "Y", "A", "B"),
  Ancestors = c("A, B", "X, A, B", "B", ""),
  Descendants = c("Y", "", "X, Y", "A, X, Y")
)

# Create d_sep_df for confounded structure
d_sep_df <- data.frame(
  Variables = c("X and Y", "X and Y", "X and Y", "X and Y"),
  Conditioning_On = c("{ }", "A", "B", "A, B"),
  Is_D_Separated = c("No", "No", "No", "Yes")
)

# Create adjustment_effect_df for confounded structure
adjustment_effect_df <- data.frame(
  Adjustment_Set = c("None", "A", "B", "A, B"),
  Total_Paths = c(4, 4, 4, 4),
  Open_Paths = c(4, 2, 2, 1)
)

# Create unmeasured_df for confounded structure
unmeasured_df <- data.frame(
  Unmeasured_Variable = c("A", "B"),
  Original_Adjustment_Sets = c(1, 1),
  Adjusted_Sets_When_Unmeasured = c(0, 0)
)

# Create instruments_df for confounded structure
instruments_df <- data.frame(
  Instruments = c("No instrumental variables found")
)

# Run the analysis - using causal_salad_dag5 directly instead of confounded_dag
dag_results <- display_dag_analysis(causal_salad_dag5)

```

```{r}
#| label: independencies-df
#| tbl-cap: "Implied Conditional Independencies"
#| results: 'asis'
#| code-fold: false
#| echo: false

# this chunk only creates a data frame but doesn't display it

# Table 6: Impact of Adjustments for confounded structure
adjustment_effect_df <- data.frame(
  Adjustment_Set = names(dag_results$adjustment_effects),
  Total_Paths = sapply(dag_results$adjustment_effects, function(x) x$total_paths),
  Open_Paths = sapply(dag_results$adjustment_effects, function(x) x$open_paths)
)

```

```{r}
#| label: create-unmeasured-df
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a data frame but doesn't display it

# Table 7: Unmeasured Confounding for confounded structure
if(length(dag_results$unmeasured_impact) > 0) {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = names(dag_results$unmeasured_impact),
    Original_Adjustment_Sets = sapply(dag_results$unmeasured_impact, function(x) x$original_sets),
    Adjusted_Sets_When_Unmeasured = sapply(dag_results$unmeasured_impact, function(x) x$modified_sets)
  )
} else {
  unmeasured_df <- data.frame(
    Unmeasured_Variable = "None",
    Original_Adjustment_Sets = NA,
    Adjusted_Sets_When_Unmeasured = NA
  )
}

```


```{r}
#| label: create-dag-plot
#| echo: false
#| include: true
#| results: 'hide'

# this chunk only creates a plot object but doesn't display it

# Create a nice visualization of the DAG for confounded structure
dag_plot <- ggdag(causal_salad_dag5) + 
  theme_dag() +
  label("DAG: Confounded Causal Structure")

```
<br>

## 2. Results

### 2.1 Table of Key DAG Properties

```{r}
#| label: tbl-key-properties-conf
#| tbl-cap: "Key Properties of the DAG"
#| code-fold: true

DT::datatable(
  properties_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.2 Table of Conditional Independencies

```{r}
#| label: independencies-analysis-conf
#| tbl-cap: "Implied Conditional Independencies"

DT::datatable(
  independencies_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.3 Table of Paths Between X and Y

```{r}
#| label: tbl-paths-conf
#| tbl-cap: "All Paths Between X and Y"

DT::datatable(
  paths_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.4 Table of Ancestors and Descendants

```{r}
#| label: tbl-ancestors-descendants-conf
#| tbl-cap: "Ancestors and Descendants"

DT::datatable(
  ancestors_descendants_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)
```
<br>

### 2.5 Table of D-Separation Results

```{r}
#| label: tbl-d-separation-conf
#| tbl-cap: "D-Separation Test Results"

DT::datatable(
  d_sep_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.6 Table of Impact of Adjustments

```{r}
#| label: tbl-adjustments-conf
#| tbl-cap: "Effect of Different Adjustment Sets"

DT::datatable(
  adjustment_effect_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.7 Table of Unmeasured Confounding Impact

```{r}
#| label: tbl-unmeasured-conf
#| tbl-cap: "Impact of Treating Variables as Unmeasured"

DT::datatable(
  unmeasured_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>

### 2.8 Table of Instrumental Variables

```{r}
#| label: tbl-instruments-conf
#| tbl-cap: "Potential Instrumental Variables"

DT::datatable(
  instruments_df,
  rownames = FALSE,
  options = list(
    pageLength = 10,
    ordering = TRUE,
    searching = FALSE
  ),
  class = 'cell-border stripe'
)

```
<br>


### 3. Visualizing Status, Adjustment Sets and Paths with ggdag

```{r}
#| fig-cap: "Different visualizations of the DAG"
#| fig-subcap: 
#|   - "Status Plot: Exposure and Outcome"
#|   - "Adjustment Sets for X → Y"
#|   - "All Paths between X and Y"
#| layout-ncol: 1

# Use causal_salad_dag5 directly instead of confounded_dag
confounded_dag_tidy <- tidy_dagitty(causal_salad_dag5)

# Status plot showing exposure/outcome
ggdag_status(confounded_dag_tidy) +
  theme_dag() +
  label("Status Plot: Exposure and Outcome")

# Adjustment set visualization
ggdag_adjustment_set(confounded_dag_tidy) +
  theme_dag() +
  label("Adjustment Sets for X → Y")

# Paths visualization
ggdag_paths(confounded_dag_tidy) +
  theme_dag() +
  label("All Paths between X and Y")

```
<br>


## 4. Interpretation and Discussion

### 4.1 Key Insights about this DAG Structure

This confounded DAG illustrates several important causal principles:

1. **Multiple Common Causes (Confounders)**
   - Both Smoking (A) and Age (B) affect HIV status (X) and Stroke risk (Y)
   - These create multiple backdoor paths between exposure and outcome
   - Without adjustment, the observed association between X and Y is a mixture of causal and non-causal effects

2. **Hierarchical Confounding Structure**
   - Age (B) affects Smoking (A), creating a cascade of effects
   - This results in complex, interwoven backdoor paths
   - Some backdoor paths involve multiple confounders (X ← B → A → Y)

3. **Multiple Backdoor Paths**
   - X ← A → Y: HIV ← Smoking → Stroke
   - X ← B → Y: HIV ← Age → Stroke
   - X ← B → A → Y: HIV ← Age → Smoking → Stroke

4. **Direct Causal Effect**
   - Despite confounding, HIV (X) still directly affects Stroke risk (Y)
   - This causal effect can be isolated with proper adjustment


### 4.2 Proper Identification Strategy

To identify the causal effect of HIV (X) on Stroke (Y):
  - The minimal sufficient adjustment set includes both Smoking (A) and Age (B)
  - Partial adjustment (e.g., controlling for only A or only B) is insufficient
  - Missing either confounder leaves backdoor paths open
  - After adjusting for both A and B, any remaining association between X and Y represents the causal effect
  - Statistical approaches could include:
    * Multivariable regression including A and B as covariates
    * Stratified analysis by levels of A and B
    * Matching or propensity score methods incorporating both confounders

<br>


::: {.callout-note collapse="true" title="<span style='font-size: 20px;'>Key DAG Terms and Concepts</span> <span style='color: darkblue; font-size: 22px;'>(click to open and close)</span>"}


### Key DAG Terms and Concepts

**DAG (Directed Acyclic Graph)**: A graphical representation of causal relationships where arrows indicate the direction of causality, and no variable can cause itself through any path (hence "acyclic").

**Exposure**: The variable whose causal effect we want to estimate (often called the treatment or independent variable).

**Outcome**: The variable we are interested in measuring the effect on (often called the dependent variable).

**Confounder**: A variable that influences both the exposure and the outcome, potentially creating a spurious association between them.

**Mediator**: A variable that lies on the causal pathway between the exposure and outcome (exposure → mediator → outcome).

**Collider**: A variable that is influenced by both the exposure and the outcome, or by two variables on a path (e.g., A → C ← B).

**Backdoor path**: Any non-causal path connecting the exposure to the outcome that creates a spurious association.

### Understanding the Analysis Tables

#### 1. Key Properties Table

This table provides a high-level overview of the DAG structure and key causal features:

- **Acyclic DAG**: Confirms the graph has no cycles (a prerequisite for valid causal analysis)

- **Causal effect identifiable**: Indicates whether the causal effect can be estimated from observational data

- **Number of paths**: Total number of paths connecting exposure and outcome

- **Number of backdoor paths**: Paths creating potential confounding that need to be blocked

- **Direct effect exists**: Whether there is a direct causal link from exposure to outcome

- **Potential mediators**: Variables that may mediate the causal effect

- **Number of adjustment sets**: How many different sets of variables could be adjusted for

- **Minimal adjustment sets**: The smallest sets of variables that block all backdoor paths

#### 2. Conditional Independencies Table

Shows the implied conditional independencies in the DAG - pairs of variables that should be statistically independent when conditioning on specific other variables. These can be used to test the validity of your DAG against observed data.

#### 3. Paths Analysis Table

Enumerates all paths connecting the exposure to the outcome:

- **Path**: The specific variables and connections in each path

- **Length**: Number of edges in the path

- **IsBackdoor**: Whether this is a backdoor path (potential source of confounding)

- **IsDirected**: Whether this is a directed path from exposure to outcome

Testing whether these paths are open or closed under different conditioning strategies is crucial for causal inference.

#### 4. Ancestors and Descendants Table

Shows which variables can causally affect (ancestors) or be affected by (descendants) each variable in the DAG:

- Understanding ancestry relationships helps identify potential confounders

- Descendants should not be controlled for as this may introduce bias

#### 5. D-Separation Results Table

Shows whether exposure and outcome are conditionally independent (d-separated) when conditioning on different variable sets:

- **Is_D_Separated = Yes**: This set of conditioning variables blocks all non-causal paths

- **Is_D_Separated = No**: Some non-causal association remains

This helps identify sufficient adjustment sets for estimating causal effects.

#### 6. Impact of Adjustments Table

Shows how different adjustment strategies affect the identification of causal effects:

- **Total_Paths**: Total number of paths between exposure and outcome

- **Open_Paths**: Number of paths that remain open after adjustment
  
Ideally, adjusting for the right variables leaves only the causal paths open.

#### 7. Unmeasured Confounding Impact Table

Simulates the effect of being unable to measure certain variables:

- **Original_Adjustment_Sets**: Number of valid adjustment sets with all variables measured

- **Adjusted_Sets_When_Unmeasured**: Number of valid adjustment sets when this variable is unmeasured

This helps identify which variables are most critical to measure for valid causal inference.

#### 8. Instrumental Variables Table

Lists potential instrumental variables - variables that affect the exposure but have no direct effect on the outcome except through the exposure. These are useful for causal inference when confounding is present, especially in methods like instrumental variable estimation.

### How to Use This Analysis for Causal Inference

1. **Identify minimal sufficient adjustment sets**: These are the variables you should control for in your analysis to remove confounding.

2. **Avoid conditioning on colliders**: This can introduce bias. Check the paths and d-separation results to ensure your adjustment strategy doesn't open non-causal paths.

3. **Validate your DAG**: Use the implied conditional independencies to test your causal assumptions against observed data.

4. **Assess sensitivity to unmeasured confounding**: The unmeasured confounding analysis helps understand how robust your conclusions might be.

5. **Consider mediation analysis**: If mediators are present, you might want to decompose total effects into direct and indirect components.

6. **Look for instrumental variables**: These can help establish causality even in the presence of unmeasured confounding.

Remember that the validity of any causal inference depends on the correctness of your DAG - it represents your causal assumptions about the data-generating process, which should be based on substantive domain knowledge.
:::
